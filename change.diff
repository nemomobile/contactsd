diff --git a/configure b/configure
index 28afe87..7fa0d6f 100755
--- a/configure
+++ b/configure
@@ -28,6 +28,29 @@ else
     VERSION="$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION.$NANO_VERSION"
 fi
 
+# Qt Version
+QMAKE=`which qmake 2>/dev/null`
+
+if [ -z "$QMAKE" ] ; then
+	QMAKE=`which qmake-qt4 2>/dev/null`
+fi
+
+if [ -z "$QMAKE" ] ; then
+	echo
+	echo "You need qmake in your PATH to build contactsd"
+	echo "Cannot proceed."
+	exit 1
+fi
+
+export QMAKE
+
+QT_VERSION=`$QMAKE -query QT_VERSION`
+if [ -z "$QT_VERSION" ] ; then
+	echo
+	echo "Cannot proceed without QT_VERSION determined."
+	exit 1
+fi
+
 relpath=`dirname $0`
 relpath=`(cd "$relpath"; /bin/pwd)`
 outpath=`/bin/pwd`
@@ -120,8 +143,11 @@ TOP_BUILDDIR = \$\$quote($TOP_BUILDDIR)
 CONFIG += \$\$quote($ENABLE_COVERAGE)
 EOF
 
-infiles="contactsd-1.0.pc
-         tests/mktests.sh"
+case $QT_VERSION in
+    "5."*) infiles="contactsd-qt5-1.0.pc tests/mktests.sh" ;;
+    *) infiles="contactsd-1.0.pc tests/mktests.sh" ;;
+esac
+
 for infile in $infiles; do
     echo "Generating $infile"
     # pre-process .in files
diff --git a/contactsd-qt5-1.0.pc.in b/contactsd-qt5-1.0.pc.in
new file mode 100644
index 0000000..7458f8a
--- /dev/null
+++ b/contactsd-qt5-1.0.pc.in
@@ -0,0 +1,12 @@
+prefix=@PREFIX@
+exec_prefix=${prefix}
+libdir=${exec_prefix}/lib
+plugindir=${prefix}/lib/contactsd-qt5-1.0/plugins
+includedir=${prefix}/include
+moc_includedir=${includedir}/contactsd-qt5-1.0
+
+Name: contactsd-qt5
+Description: Contact synchronization daemon for meego
+Version: @VERSION@
+Cflags: -I${includedir}/contactsd-qt5-1.0
+Libs: -L${libdir} -module -avoid-version
diff --git a/contactsd-qt5.conf b/contactsd-qt5.conf
new file mode 100644
index 0000000..a04720f
--- /dev/null
+++ b/contactsd-qt5.conf
@@ -0,0 +1,8 @@
+<backup-configuration>
+    <application-type>nokia</application-type>
+    <application-name>Contacts Daemon</application-name>
+    <backup-method>permanent-backup-files</backup-method>
+    <locations>
+        <location type="permanent-backup-file" category="contacts">$HOME/.cache/telepathy/avatars</location>
+    </locations>
+</backup-configuration>
diff --git a/contactsd.desktop b/contactsd.desktop
new file mode 100644
index 0000000..902da6d
--- /dev/null
+++ b/contactsd.desktop
@@ -0,0 +1,7 @@
+[Desktop Entry]
+Type=Application
+Name=Contacts daemon
+Exec=/usr/bin/contactsd
+Comment=Telepathy contacts observer
+X-Moblin-Priority=Low
+X-Meego-Watchdog=Restart
diff --git a/contactsd.pro b/contactsd.pro
index 81e6f20..3efb5eb 100644
--- a/contactsd.pro
+++ b/contactsd.pro
@@ -4,11 +4,16 @@ QT -= gui
 
 SUBDIRS += src plugins tests
 
+equals(QT_MAJOR_VERSION, 4): PACKAGENAME=contactsd
+equals(QT_MAJOR_VERSION, 5): PACKAGENAME=contactsd-qt5
+
+PKGCONFIG_FILE=$${PACKAGENAME}-1.0.pc
+
 pkgconfig.path=$$LIBDIR/pkgconfig
-pkgconfig.files=contactsd-1.0.pc
+pkgconfig.files=$${PKGCONFIG_FILE}
 
 backupconf.path=$$PREFIX/share/backup-framework/applications/
-backupconf.files=contactsd.conf
+backupconf.files=$${PACKAGENAME}.conf
 
 INSTALLS += pkgconfig backupconf
 
@@ -19,7 +24,7 @@ QMAKE_EXTRA_TARGETS += check
 confclean.depends += distclean
 confclean.commands += \
     $(DEL_FILE) $$TOP_BUILDDIR/.qmake.cache \
-    $(DEL_FILE) $$TOP_BUILDDIR/contactsd-1.0.pc
+    $(DEL_FILE) $$TOP_BUILDDIR/$${PKGCONFIG_FILE}
 QMAKE_EXTRA_TARGETS += confclean
 
 OTHER_FILES += configure
diff --git a/plugins/birthday/birthday.pro b/plugins/birthday/birthday.pro
index 1b17267..73a0b38 100644
--- a/plugins/birthday/birthday.pro
+++ b/plugins/birthday/birthday.pro
@@ -26,10 +26,21 @@ QT -= gui
 # Hack: mkcal adds /usr/include/meegotouch to include path, and alphabetic CONFIG
 # always puts that before mlocale, resulting in link errors. Force mlocale to be
 # first.
-INCLUDEPATH += /usr/include/mlocale
+equals(QT_MAJOR_VERSION, 4): INCLUDEPATH += /usr/include/mlocale
+equals(QT_MAJOR_VERSION, 5): INCLUDEPATH += /usr/include/mlocale5
 
-CONFIG += plugin mlocale mkcal mobility
-MOBILITY += contacts
+CONFIG += plugin
+
+equals(QT_MAJOR_VERSION, 4) {
+    CONFIG += mlocale mkcal mobility
+    MOBILITY += contacts
+}
+equals(QT_MAJOR_VERSION, 5) {
+    CONFIG += link_pkgconfig
+    PKGCONFIG += mlocale5 libmkcal-qt5 libkcalcoren-qt5
+    PKGCONFIG += Qt5Contacts
+    DEFINES *= USING_QTPIM
+}
 
 CONFIG(coverage):{
 QMAKE_CXXFLAGS += -c -g  --coverage -ftest-coverage -fprofile-arcs
@@ -50,6 +61,7 @@ SOURCES  = cdbirthdaycalendar.cpp \
     cdbirthdayplugin.cpp
 
 TARGET = birthdayplugin
-target.path = $$LIBDIR/contactsd-1.0/plugins
+equals(QT_MAJOR_VERSION, 4): target.path = $$LIBDIR/contactsd-1.0/plugins
+equals(QT_MAJOR_VERSION, 5): target.path = $$LIBDIR/contactsd-qt5-1.0/plugins
 
 INSTALLS += target
diff --git a/plugins/birthday/cdbirthdaycalendar.cpp b/plugins/birthday/cdbirthdaycalendar.cpp
index 9e163c6..92b2b15 100644
--- a/plugins/birthday/cdbirthdaycalendar.cpp
+++ b/plugins/birthday/cdbirthdaycalendar.cpp
@@ -110,21 +110,25 @@ mKCal::Notebook::Ptr CDBirthdayCalendar::createNotebook()
                                                     0));
 }
 
-QHash<QContactLocalId, CalendarBirthday>
+QHash<CDBirthdayCalendar::ContactIdType, CalendarBirthday>
 CDBirthdayCalendar::birthdays()
 {
     if (not mStorage->loadNotebookIncidences(calNotebookId)) {
         warning() << Q_FUNC_INFO << "Failed to load all incidences";
-        return QHash<QContactLocalId, CalendarBirthday>();
+        return QHash<ContactIdType, CalendarBirthday>();
     }
 
-    QHash<QContactLocalId, CalendarBirthday> result;
+    QHash<ContactIdType, CalendarBirthday> result;
 
     foreach(const KCalCore::Event::Ptr event, mCalendar->events()) {
         const QString eventUid = event->uid();
-        const QContactLocalId contactId = localContactId(eventUid);
+        const ContactIdType contactId = localContactId(eventUid);
 
+#ifdef USING_QTPIM
+        if (!contactId.isNull()) {
+#else
         if (0 != contactId) {
+#endif
             result.insert(contactId, CalendarBirthday(event->dtStart().date(), event->summary()));
         } else {
             warning() << Q_FUNC_INFO << "Birthday event with a bad uid: " << eventUid;
@@ -134,15 +138,25 @@ CDBirthdayCalendar::birthdays()
     return result;
 }
 
+#ifdef USING_QTPIM
+static QContactId contactId(const QContact &contact) { return contact.id(); }
+#else
+static QContactLocalId contactId(const QContact &contact) { return contact.localId(); }
+#endif
+
 void CDBirthdayCalendar::updateBirthday(const QContact &contact)
 {
     // Retrieve contact details.
+#ifdef USING_QTPIM
+    const QString displayLabel = contact.detail<QContactDisplayLabel>().label();
+#else
     const QString displayLabel = contact.displayLabel();
+#endif
     const QDate contactBirthday = contact.detail<QContactBirthday>().date();
 
     if (displayLabel.isEmpty() || contactBirthday.isNull()) {
         warning() << Q_FUNC_INFO << "Contact without name or birthday, local ID: "
-                  << contact.localId();
+                  << contactId(contact);
         return;
     }
 
@@ -152,13 +166,13 @@ void CDBirthdayCalendar::updateBirthday(const QContact &contact)
         return;
     }
 
-    KCalCore::Event::Ptr event = calendarEvent(contact.localId());
+    KCalCore::Event::Ptr event = calendarEvent(contactId(contact));
 
     if (event.isNull()) {
         // Add a new event.
         event = KCalCore::Event::Ptr(new KCalCore::Event());
         event->startUpdates();
-        event->setUid(calendarEventId(contact.localId()));
+        event->setUid(calendarEventId(contactId(contact)));
         event->setAllDay(true);
 
         // Ensure events appear as birthdays in the calendar, NB#259710.
@@ -239,10 +253,10 @@ void CDBirthdayCalendar::updateBirthday(const QContact &contact)
     event->setReadOnly(true);
     event->endUpdates();
 
-    debug() << "Updated birthday event in calendar, local ID: " << contact.localId();
+    debug() << "Updated birthday event in calendar, local ID: " << contactId(contact);
 }
 
-void CDBirthdayCalendar::deleteBirthday(QContactLocalId contactId)
+void CDBirthdayCalendar::deleteBirthday(ContactIdType contactId)
 {
     KCalCore::Event::Ptr event = calendarEvent(contactId);
 
@@ -263,7 +277,7 @@ void CDBirthdayCalendar::save()
     }
 }
 
-CalendarBirthday CDBirthdayCalendar::birthday(QContactLocalId contactId)
+CalendarBirthday CDBirthdayCalendar::birthday(ContactIdType contactId)
 {
     KCalCore::Event::Ptr event = calendarEvent(contactId);
 
@@ -274,21 +288,53 @@ CalendarBirthday CDBirthdayCalendar::birthday(QContactLocalId contactId)
     return CalendarBirthday(event->dtStart().date(), event->summary());
 }
 
-QContactLocalId CDBirthdayCalendar::localContactId(const QString &calendarEventId)
+#ifdef USING_QTPIM
+quint32 numericContactId(const QContactId &id)
+{
+    // Note: only works with the qtcontacts-sqlite backend
+    if (!id.isNull()) {
+        QStringList components = id.toString().split(QChar::fromLatin1(':'));
+        const QString &idComponent = components.isEmpty() ? QString() : components.last();
+        if (idComponent.startsWith(QString::fromLatin1("sql-"))) {
+            return idComponent.mid(4).toUInt();
+        }
+    }
+    return 0;
+}
+QContactId fromNumericContactId(quint32 id)
+{
+    // Note: only works with the qtcontacts-sqlite backend
+    static const QString idStr(QStringLiteral("qtcontacts:org.nemomobile.contacts.sqlite::%1"));
+    return QContactId::fromString(idStr.arg(id));
+}
+#else
+const QContactLocalId &numericContactId(const QContactLocalId &id)
 {
+    return id;
+}
+QContactLocalId fromNumericContactId(quint32 id)
+{
+    return id;
+}
+#endif
+
+CDBirthdayCalendar::ContactIdType CDBirthdayCalendar::localContactId(const QString &calendarEventId)
+{
+    quint32 numericId = 0;
+
     if (calendarEventId.startsWith(calIdExtension)) {
-        return calendarEventId.mid(calIdExtension.length()).toUInt();
+        numericId = calendarEventId.mid(calIdExtension.length()).toUInt();
     }
 
-    return 0;
+    return fromNumericContactId(numericId);
 }
 
-QString CDBirthdayCalendar::calendarEventId(QContactLocalId contactId)
+QString CDBirthdayCalendar::calendarEventId(ContactIdType contactId)
 {
-    return calIdExtension + QString::number(contactId);
+    return calIdExtension + QString::number(numericContactId(contactId));
 }
 
-KCalCore::Event::Ptr CDBirthdayCalendar::calendarEvent(QContactLocalId contactId)
+KCalCore::Event::Ptr CDBirthdayCalendar::calendarEvent(ContactIdType contactId)
 {
     const QString eventId = calendarEventId(contactId);
 
diff --git a/plugins/birthday/cdbirthdaycalendar.h b/plugins/birthday/cdbirthdaycalendar.h
index 43cca9e..f80ea50 100644
--- a/plugins/birthday/cdbirthdaycalendar.h
+++ b/plugins/birthday/cdbirthdaycalendar.h
@@ -31,7 +31,11 @@
 #include <extendedstorage.h>
 #include <extendedcalendar.h>
 
+#ifdef USING_QTPIM
+QTCONTACTS_USE_NAMESPACE
+#else
 QTM_USE_NAMESPACE
+#endif
 
 class CalendarBirthday
 {
@@ -55,6 +59,12 @@ class CDBirthdayCalendar : public QObject
     Q_OBJECT
 
 public:
+#ifdef USING_QTPIM
+    typedef QContactId ContactIdType;
+#else
+    typedef QContactLocalId ContactIdType;
+#endif
+
     enum SyncMode {
         KeepOldDB,
         DropOldDB
@@ -68,21 +78,21 @@ public:
     void updateBirthday(const QContact &contact);
 
     //! Deletes \a contact birthday from calendar.
-    void deleteBirthday(QContactLocalId contactId);
+    void deleteBirthday(ContactIdType contactId);
 
     //! Actually save the events in the calendar database
     void save();
 
-    CalendarBirthday birthday(QContactLocalId contactId);
-    QHash<QContactLocalId, CalendarBirthday> birthdays();
+    CalendarBirthday birthday(ContactIdType contactId);
+    QHash<ContactIdType, CalendarBirthday> birthdays();
 
 private:
     mKCal::Notebook::Ptr createNotebook();
 
-    static QContactLocalId localContactId(const QString &calendarEventId);
-    static QString calendarEventId(QContactLocalId contactId);
+    static ContactIdType localContactId(const QString &calendarEventId);
+    static QString calendarEventId(ContactIdType contactId);
 
-    KCalCore::Event::Ptr calendarEvent(QContactLocalId contactId);
+    KCalCore::Event::Ptr calendarEvent(ContactIdType contactId);
 
 private Q_SLOTS:
     void onLocaleChanged();
diff --git a/plugins/birthday/cdbirthdaycontroller.cpp b/plugins/birthday/cdbirthdaycontroller.cpp
index 9a5a561..ccf964f 100644
--- a/plugins/birthday/cdbirthdaycontroller.cpp
+++ b/plugins/birthday/cdbirthdaycontroller.cpp
@@ -32,9 +32,17 @@
 #include <QContactBirthday>
 #include <QContactDetailFilter>
 #include <QContactFetchRequest>
+#ifdef USING_QTPIM
+#include <QContactIdFilter>
+#else
 #include <QContactLocalIdFilter>
+#endif
 
+#ifdef USING_QTPIM
+QTCONTACTS_USE_NAMESPACE
+#else
 QTM_USE_NAMESPACE
+#endif
 
 using namespace Contactsd;
 
@@ -44,12 +52,21 @@ CDBirthdayController::CDBirthdayController(QObject *parent)
     , mManager(0)
 {
     mManager = new QContactManager(this);
+#ifdef USING_QTPIM
+    connect(mManager, SIGNAL(contactsAdded(QList<QContactId>)),
+            SLOT(contactsChanged(QList<QContactId>)));
+    connect(mManager, SIGNAL(contactsChanged(QList<QContactId>)),
+            SLOT(contactsChanged(QList<QContactId>)));
+    connect(mManager, SIGNAL(contactsRemoved(QList<QContactId>)),
+            SLOT(contactsRemoved(QList<QContactId>)));
+#else
     connect(mManager, SIGNAL(contactsAdded(QList<QContactLocalId>)),
             SLOT(contactsChanged(QList<QContactLocalId>)));
     connect(mManager, SIGNAL(contactsChanged(QList<QContactLocalId>)),
             SLOT(contactsChanged(QList<QContactLocalId>)));
     connect(mManager, SIGNAL(contactsRemoved(QList<QContactLocalId>)),
             SLOT(contactsRemoved(QList<QContactLocalId>)));
+#endif
     connect(mManager, SIGNAL(dataChanged()), SLOT(updateAllBirthdays()));
 
     const CDBirthdayCalendar::SyncMode syncMode = stampFileExists() ? CDBirthdayCalendar::KeepOldDB :
@@ -64,14 +81,17 @@ CDBirthdayController::~CDBirthdayController()
 }
 
 void
-CDBirthdayController::contactsChanged(const QList<QContactLocalId>& contacts)
+CDBirthdayController::contactsChanged(const QList<ContactIdType>& contacts)
 {
     fetchContacts(contacts);
 }
 
-void CDBirthdayController::contactsRemoved(const QList<QContactLocalId>& contacts)
+#ifdef USING_QTPIM
+#else
+#endif
+void CDBirthdayController::contactsRemoved(const QList<ContactIdType>& contacts)
 {
-    foreach (const QContactLocalId &id, contacts)
+    foreach (const ContactIdType &id, contacts)
         mCalendar->deleteBirthday(id);
     mCalendar->save();
 }
@@ -115,7 +135,11 @@ CDBirthdayController::updateAllBirthdays()
 {
     // Fetch any contact with a birthday.
     QContactDetailFilter fetchFilter;
+#ifdef USING_QTPIM
+    fetchFilter.setDetailType(QContactBirthday::Type);
+#else
     fetchFilter.setDetailDefinitionName(QContactBirthday::DefinitionName);
+#endif
 
     fetchContacts(fetchFilter, SLOT(onFullSyncRequestStateChanged(QContactAbstractRequest::State)));
 }
@@ -134,9 +158,13 @@ CDBirthdayController::onFullSyncRequestStateChanged(QContactAbstractRequest::Sta
 ///////////////////////////////////////////////////////////////////////////////////////////////////
 
 void
-CDBirthdayController::fetchContacts(const QList<QContactLocalId> &contactIds)
+CDBirthdayController::fetchContacts(const QList<ContactIdType> &contactIds)
 {
+#ifdef USING_QTPIM
+    QContactIdFilter fetchFilter;
+#else
     QContactLocalIdFilter fetchFilter;
+#endif
     fetchFilter.setIds(contactIds);
 
     fetchContacts(fetchFilter, SLOT(onFetchRequestStateChanged(QContactAbstractRequest::State)));
@@ -156,9 +184,16 @@ void
 CDBirthdayController::fetchContacts(const QContactFilter &filter, const char *slot)
 {
     QContactFetchHint fetchHint;
+#ifdef USING_QTPIM
+    static const QList<QContactDetail::DetailType> detailTypes = QList<QContactDetail::DetailType>() 
+        << QContactBirthday::Type
+        << QContactDisplayLabel::Type;
+    fetchHint.setDetailTypesHint(detailTypes);
+#else
     static const QStringList detailDefinitions = QStringList() << QContactBirthday::DefinitionName
                                                                << QContactDisplayLabel::DefinitionName;
     fetchHint.setDetailDefinitionsHint(detailDefinitions);
+#endif
     fetchHint.setOptimizationHints(QContactFetchHint::NoRelationships |
                                    QContactFetchHint::NoActionPreferences |
                                    QContactFetchHint::NoBinaryBlobs);
@@ -228,19 +263,29 @@ CDBirthdayController::processFetchRequest(QContactFetchRequest *const fetchReque
     return success;
 }
 
+#ifdef USING_QTPIM
+const QContactId &apiId(const QContact &contact) { return contact.id(); }
+#else
+QContactLocalId apiId(const QContact &contact) { return contact.localId(); }
+#endif
+
 void
 CDBirthdayController::updateBirthdays(const QList<QContact> &changedBirthdays)
 {
     foreach (const QContact &contact, changedBirthdays) {
         const QContactBirthday contactBirthday = contact.detail<QContactBirthday>();
+#ifdef USING_QTPIM
+        const QString contactDisplayLabel = contact.detail<QContactDisplayLabel>().label();
+#else
         const QString contactDisplayLabel = contact.displayLabel();
-        const CalendarBirthday calendarBirthday = mCalendar->birthday(contact.localId());
+#endif
+        const CalendarBirthday calendarBirthday = mCalendar->birthday(apiId(contact));
 
         // Display label or birthdate was removed from the contact, so delete it from the calendar.
         if (contactDisplayLabel.isEmpty() || contactBirthday.date().isNull()) {
             debug() << "Contact: " << contact << " removed birthday or displayLabel, so delete the calendar event";
 
-            mCalendar->deleteBirthday(contact.localId());
+            mCalendar->deleteBirthday(apiId(contact));
         // Display label or birthdate was changed on the contact, so update the calendar.
         } else if ((contactDisplayLabel != calendarBirthday.summary()) ||
                    (contactBirthday.date() != calendarBirthday.date())) {
@@ -256,18 +301,22 @@ CDBirthdayController::updateBirthdays(const QList<QContact> &changedBirthdays)
 void
 CDBirthdayController::syncBirthdays(const QList<QContact> &birthdayContacts)
 {
-    QHash<QContactLocalId, CalendarBirthday> oldBirthdays = mCalendar->birthdays();
+    QHash<ContactIdType, CalendarBirthday> oldBirthdays = mCalendar->birthdays();
 
     // Check all birthdays from the contacts if the stored calendar item is up-to-date
     foreach (const QContact &contact, birthdayContacts) {
+#ifdef USING_QTPIM
+        const QString contactDisplayLabel = contact.detail<QContactDisplayLabel>().label();
+#else
         const QString contactDisplayLabel = contact.displayLabel();
+#endif
 
         if (contactDisplayLabel.isNull()) {
             debug() << "Contact: " << contact << " has no displayLabel, so not syncing to calendar";
             continue;
         }
 
-        QHash<QContactLocalId, CalendarBirthday>::Iterator it = oldBirthdays.find(contact.localId());
+        QHash<ContactIdType, CalendarBirthday>::Iterator it = oldBirthdays.find(apiId(contact));
 
         if (oldBirthdays.end() != it) {
             const QContactBirthday contactBirthday = contact.detail<QContactBirthday>();
@@ -292,7 +341,7 @@ CDBirthdayController::syncBirthdays(const QList<QContact> &birthdayContacts)
     }
 
     // Remaining old birthdays in the calendar db do not did not match any contact, so remove them.
-    foreach(QContactLocalId id, oldBirthdays.keys()) {
+    foreach (const ContactIdType &id, oldBirthdays.keys()) {
         debug() << "Birthday with contact id" << id << "no longer has a matching contact, trashing it";
         mCalendar->deleteBirthday(id);
     }
diff --git a/plugins/birthday/cdbirthdaycontroller.h b/plugins/birthday/cdbirthdaycontroller.h
index f35a944..2c964b8 100644
--- a/plugins/birthday/cdbirthdaycontroller.h
+++ b/plugins/birthday/cdbirthdaycontroller.h
@@ -33,7 +33,11 @@
 
 class CDBirthdayCalendar;
 
+#ifdef USING_QTPIM
+QTCONTACTS_USE_NAMESPACE
+#else
 QTM_USE_NAMESPACE
+#endif
 
 class CDBirthdayController : public QObject
 {
@@ -45,12 +49,23 @@ class CDBirthdayController : public QObject
     };
 
 public:
+#ifdef USING_QTPIM
+    typedef QContactId ContactIdType;
+#else
+    typedef QContactLocalId ContactIdType;
+#endif
+    
     explicit CDBirthdayController(QObject *parent = 0);
     ~CDBirthdayController();
 
 private Q_SLOTS:
+#ifdef USING_QTPIM
+    void contactsChanged(const QList<QContactId> &contacts);
+    void contactsRemoved(const QList<QContactId> &contacts);
+#else
     void contactsChanged(const QList<QContactLocalId> &contacts);
     void contactsRemoved(const QList<QContactLocalId> &contacts);
+#endif
 
     void onFetchRequestStateChanged(QContactAbstractRequest::State newState);
     void onFullSyncRequestStateChanged(QContactAbstractRequest::State newState);
@@ -63,7 +78,7 @@ private:
     bool processFetchRequest(QContactFetchRequest * const fetchRequest,
                              QContactAbstractRequest::State newState,
                              SyncMode syncMode = Incremental);
-    void fetchContacts(const QList<QContactLocalId> &contactIds);
+    void fetchContacts(const QList<ContactIdType> &contactIds);
     void fetchContacts(const QContactFilter &filter, const char *slot);
     void updateBirthdays(const QList<QContact> &changedBirthdays);
     void syncBirthdays(const QList<QContact> &birthdayContacts);
diff --git a/plugins/birthday/cdbirthdayplugin.cpp b/plugins/birthday/cdbirthdayplugin.cpp
index f4a0e5e..27a70fe 100644
--- a/plugins/birthday/cdbirthdayplugin.cpp
+++ b/plugins/birthday/cdbirthdayplugin.cpp
@@ -53,4 +53,6 @@ CDBirthdayPlugin::MetaData CDBirthdayPlugin::metaData()
     return data;
 }
 
+#if QT_VERSION < QT_VERSION_CHECK(5, 0, 0)
 Q_EXPORT_PLUGIN2(birthdayplugin, CDBirthdayPlugin)
+#endif
diff --git a/plugins/birthday/cdbirthdayplugin.h b/plugins/birthday/cdbirthdayplugin.h
index fff1e71..0e8c3a2 100644
--- a/plugins/birthday/cdbirthdayplugin.h
+++ b/plugins/birthday/cdbirthdayplugin.h
@@ -36,6 +36,9 @@ class CDBirthdayController;
 class CDBirthdayPlugin : public Contactsd::BasePlugin
 {
     Q_OBJECT
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+    Q_PLUGIN_METADATA(IID "org.nemomobile.contactsd.birthday")
+#endif
 
 public:
     CDBirthdayPlugin();
diff --git a/plugins/telepathy/cdtpavatarupdate.cpp b/plugins/telepathy/cdtpavatarupdate.cpp
index 96c14e6..2f25285 100644
--- a/plugins/telepathy/cdtpavatarupdate.cpp
+++ b/plugins/telepathy/cdtpavatarupdate.cpp
@@ -114,7 +114,7 @@ void CDTpAvatarUpdate::onRequestFinished()
                                                                : mNetworkReply->url()).toString();
 
     QByteArray avatarHash = QCryptographicHash::hash(avatarUrl.toUtf8(), QCryptographicHash::Sha1);
-    QFile avatarFile(mCacheDir.absoluteFilePath(QString::fromAscii(avatarHash.toHex())));
+    QFile avatarFile(mCacheDir.absoluteFilePath(QString::fromLatin1(avatarHash.toHex())));
 
     // Check for existing avatar file and its size to see if we need to fetch from network.
     const qint64 contentLength = mNetworkReply->header(QNetworkRequest::ContentLengthHeader).toLongLong();
diff --git a/plugins/telepathy/cdtpplugin.cpp b/plugins/telepathy/cdtpplugin.cpp
index 786e7ce..5997a02 100644
--- a/plugins/telepathy/cdtpplugin.cpp
+++ b/plugins/telepathy/cdtpplugin.cpp
@@ -72,4 +72,6 @@ CDTpPlugin::MetaData CDTpPlugin::metaData()
     return data;
 }
 
+#if QT_VERSION < QT_VERSION_CHECK(5, 0, 0)
 Q_EXPORT_PLUGIN2(telepathyplugin, CDTpPlugin)
+#endif
diff --git a/plugins/telepathy/cdtpplugin.h b/plugins/telepathy/cdtpplugin.h
index be6851b..bdc139d 100644
--- a/plugins/telepathy/cdtpplugin.h
+++ b/plugins/telepathy/cdtpplugin.h
@@ -36,6 +36,9 @@ class CDTpController;
 class CDTpPlugin : public Contactsd::BasePlugin
 {
     Q_OBJECT
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+    Q_PLUGIN_METADATA(IID "org.nemomobile.contactsd.telepathy")
+#endif
 
 public:
     CDTpPlugin();
diff --git a/plugins/telepathy/cdtpstorage.cpp b/plugins/telepathy/cdtpstorage.cpp
index 12fa680..e0de761 100644
--- a/plugins/telepathy/cdtpstorage.cpp
+++ b/plugins/telepathy/cdtpstorage.cpp
@@ -31,9 +31,13 @@
 #include <QContactDetail>
 #include <QContactDetailFilter>
 #include <QContactIntersectionFilter>
-#include <QContactLocalIdFilter>
 #include <QContactRelationshipFilter>
 #include <QContactUnionFilter>
+#ifdef USING_QTPIM
+#include <QContactIdFilter>
+#else
+#include <QContactLocalIdFilter>
+#endif
 
 #include <QContactAddress>
 #include <QContactAvatar>
@@ -67,6 +71,14 @@ using namespace Contactsd;
 // at least have FIFO semantics on lock release.
 #define BATCH_STORE_SIZE 5
 
+#ifdef USING_QTPIM
+typedef QContactId ContactIdType;
+typedef QList<QContactDetail::DetailType> DetailList;
+#else
+typedef QContactLocalId ContactIdType;
+typedef QStringList DetailList;
+#endif
+
 namespace {
 
 template<int N>
@@ -131,29 +143,65 @@ QString asString(CDTpContact::Info::Capability c)
     return QString();
 }
 
+#ifdef USING_QTPIM
+QString asString(const QContactId &id) { return id.toString(); }
+#else
+QString asString(QContactLocalId id) { return QString::number(id); }
+#endif
+
+#ifdef USING_QTPIM
+QContactId apiId(const QContact &contact) { return contact.id(); }
+#else
+QContactLocalId apiId(const QContact &contact) { return contact.localId(); }
+#endif
+
+}
+
+template<typename F>
+QString stringValue(const QContactDetail &detail, F field)
+{
+#ifdef USING_QTPIM
+    return detail.value<QString>(field);
+#else
+    return detail.value(field);
+#endif
 }
 
 class Q_CONTACTS_EXPORT QContactTpMetadata : public QContactDetail
 {
 public:
+#ifdef USING_QTPIM
+    Q_DECLARE_CUSTOM_CONTACT_DETAIL(QContactTpMetadata);
+
+    enum {
+        FieldContactId = 0,
+        FieldAccountId = 1,
+        FieldAccountEnabled = 2
+    };
+#else
     Q_DECLARE_CUSTOM_CONTACT_DETAIL(QContactTpMetadata, "TpMetadata")
     Q_DECLARE_LATIN1_CONSTANT(FieldContactId, "ContactId");
     Q_DECLARE_LATIN1_CONSTANT(FieldAccountId, "AccountId");
     Q_DECLARE_LATIN1_CONSTANT(FieldAccountEnabled, "AccountEnabled");
+#endif
 
     void setContactId(const QString &s) { setValue(FieldContactId, s); }
-    QString contactId() const { return value(FieldContactId); }
+    QString contactId() const { return stringValue(*this, FieldContactId); }
 
     void setAccountId(const QString &s) { setValue(FieldAccountId, s); }
-    QString accountId() const { return value(FieldAccountId); }
+    QString accountId() const { return stringValue(*this, FieldAccountId); }
 
     void setAccountEnabled(bool b) { setValue(FieldAccountEnabled, asString(b)); }
-    bool accountEnabled() const { return (value(FieldAccountEnabled) == asString(true)); }
+    bool accountEnabled() const { return (stringValue(*this, FieldAccountEnabled) == asString(true)); }
 
     static QContactDetailFilter matchContactId(const QString &s)
     {
         QContactDetailFilter filter;
+#ifdef USING_QTPIM
+        filter.setDetailType(QContactTpMetadata::Type, FieldContactId);
+#else
         filter.setDetailDefinitionName(QContactTpMetadata::DefinitionName, FieldContactId);
+#endif
         filter.setValue(s);
         filter.setMatchFlags(QContactFilter::MatchExactly);
         return filter;
@@ -162,26 +210,48 @@ public:
     static QContactDetailFilter matchAccountId(const QString &s)
     {
         QContactDetailFilter filter;
+#ifdef USING_QTPIM
+        filter.setDetailType(QContactTpMetadata::Type, FieldAccountId);
+#else
         filter.setDetailDefinitionName(QContactTpMetadata::DefinitionName, FieldAccountId);
+#endif
         filter.setValue(s);
         filter.setMatchFlags(QContactFilter::MatchExactly);
         return filter;
     }
 };
 
+#ifdef USING_QTPIM
+const QContactDetail::DetailType QContactTpMetadata::Type(static_cast<QContactDetail::DetailType>(QContactDetail::TypeVersion + 1));
+#else
 Q_IMPLEMENT_CUSTOM_CONTACT_DETAIL(QContactTpMetadata, "TpMetadata");
 Q_DEFINE_LATIN1_CONSTANT(QContactTpMetadata::FieldContactId, "ContactId");
 Q_DEFINE_LATIN1_CONSTANT(QContactTpMetadata::FieldAccountId, "AccountId");
 Q_DEFINE_LATIN1_CONSTANT(QContactTpMetadata::FieldAccountEnabled, "AccountEnabled");
+#endif
 
 namespace {
 
 const int UPDATE_TIMEOUT = 150; // ms
 const int UPDATE_THRESHOLD = 50; // contacts
 
+#ifdef USING_QTPIM
+const int QContactDetail__ContextDefault = (QContactDetail::ContextOther+1);
+const int QContactDetail__ContextLarge = (QContactDetail::ContextOther+2);
+
+const int QContactName__FieldCustomLabel = (QContactName::FieldSuffix+1);
+
+const int QContactOnlineAccount__FieldAccountPath = (QContactOnlineAccount::FieldSubTypes+1);
+const int QContactOnlineAccount__FieldAccountIconPath = (QContactOnlineAccount::FieldSubTypes+2);
+const int QContactOnlineAccount__FieldEnabled = (QContactOnlineAccount::FieldSubTypes+3);
+#else
+const QLatin1String QContactDetail__ContextDefault("Default");
+const QLatin1String QContactDetail__ContextLarge("Large");
+
 const QLatin1String QContactOnlineAccount__FieldAccountPath("AccountPath");
 const QLatin1String QContactOnlineAccount__FieldAccountIconPath("AccountIconPath");
 const QLatin1String QContactOnlineAccount__FieldEnabled("Enabled");
+#endif
 
 QContactManager *manager()
 {
@@ -192,12 +262,26 @@ QContactManager *manager()
 QContactDetailFilter matchTelepathyFilter()
 {
     QContactDetailFilter filter;
+#ifdef USING_QTPIM
+    filter.setDetailType(QContactSyncTarget::Type, QContactSyncTarget::FieldSyncTarget);
+#else
     filter.setDetailDefinitionName(QContactSyncTarget::DefinitionName, QContactSyncTarget::FieldSyncTarget);
+#endif
     filter.setValue(QLatin1String("telepathy"));
     filter.setMatchFlags(QContactFilter::MatchExactly);
     return filter;
 }
 
+template<typename T>
+DetailList::value_type detailType()
+{
+#ifdef USING_QTPIM
+    return T::Type;
+#else
+    return QString::fromLatin1(T::DefinitionName.latin1());
+#endif
+}
+
 QContactFetchHint contactFetchHint(bool selfContact = false)
 {
     QContactFetchHint hint;
@@ -209,35 +293,49 @@ QContactFetchHint contactFetchHint(bool selfContact = false)
 
     if (selfContact) {
         // For the self contact, we only care about accounts/presence/avatars
-        hint.setDetailDefinitionsHint(QStringList() << QContactOnlineAccount::DefinitionName
-                                                    << QContactPresence::DefinitionName
-                                                    << QContactAvatar::DefinitionName);
+#ifdef USING_QTPIM
+        hint.setDetailTypesHint(DetailList()
+#else
+        hint.setDetailDefinitionsHint(DetailList()
+#endif
+            << detailType<QContactOnlineAccount>()
+            << detailType<QContactPresence>()
+            << detailType<QContactAvatar>());
     }
 
     return hint;
 }
 
-QContactLocalId selfContactLocalId()
+ContactIdType selfContactLocalId()
 {
     QContactManager *mgr(manager());
 
     // Check that there is a self contact
-    QContactLocalId selfLocalId = mgr->selfContactId();
-
     QContactId selfId;
-    selfId.setLocalId(selfLocalId);
+#ifdef USING_QTPIM
+    selfId = mgr->selfContactId();
+#else
+    selfId.setLocalId(mgr->selfContactId());
+#endif
 
     // Find the telepathy contact aggregated by the real self contact
     QContactRelationshipFilter relationshipFilter;
+#ifdef USING_QTPIM
+    relationshipFilter.setRelationshipType(QContactRelationship::Aggregates());
+    QContact relatedContact;
+    relatedContact.setId(selfId);
+    relationshipFilter.setRelatedContact(relatedContact);
+#else
     relationshipFilter.setRelationshipType(QContactRelationship::Aggregates);
     relationshipFilter.setRelatedContactId(selfId);
+#endif
     relationshipFilter.setRelatedContactRole(QContactRelationship::First);
 
     QContactIntersectionFilter selfFilter;
     selfFilter << matchTelepathyFilter();
     selfFilter << relationshipFilter;
 
-    QList<QContactLocalId> selfContactIds = mgr->contactIds(selfFilter);
+    QList<ContactIdType> selfContactIds = mgr->contactIds(selfFilter);
     if (selfContactIds.count() > 0) {
         if (selfContactIds.count() > 1) {
             warning() << "Invalid number of telepathy self contacts!" << selfContactIds.count();
@@ -259,22 +357,34 @@ QContactLocalId selfContactLocalId()
             warning() << "Unable to save empty contact as self contact - error:" << mgr->error();
         } else {
             // Find the aggregate contact created by saving our self contact
+#ifdef USING_QTPIM
+            relationshipFilter.setRelationshipType(QContactRelationship::Aggregates());
+            relatedContact.setId(tpSelf.id());
+            relationshipFilter.setRelatedContact(relatedContact);
+#else
             relationshipFilter.setRelationshipType(QContactRelationship::Aggregates);
             relationshipFilter.setRelatedContactId(tpSelf.id());
+#endif
             relationshipFilter.setRelatedContactRole(QContactRelationship::Second);
 
             foreach (const QContact &aggregator, mgr->contacts(relationshipFilter)) {
                 // Remove the relationship between these contacts
                 QContactRelationship relationship;
+#ifdef USING_QTPIM
+                relationship.setRelationshipType(QContactRelationship::Aggregates());
+                relationship.setFirst(aggregator);
+                relationship.setSecond(tpSelf);
+#else
                 relationship.setRelationshipType(QContactRelationship::Aggregates);
                 relationship.setFirst(aggregator.id());
                 relationship.setSecond(tpSelf.id());
+#endif
 
                 if (!mgr->removeRelationship(relationship)) {
                     warning() << "Unable to remove relationship for self contact - error:" << mgr->error();
                 } else {
                     // Remove this contact
-                    if (!mgr->removeContact(aggregator.localId())) {
+                    if (!mgr->removeContact(apiId(aggregator))) {
                         warning() << "Unable to remove unwanted aggregate of self contact - error:" << mgr->error();
                     }
                 }
@@ -282,46 +392,64 @@ QContactLocalId selfContactLocalId()
 
             // Now connect our contact to the real self contact
             QContactRelationship relationship;
+#ifdef USING_QTPIM
+            relationship.setRelationshipType(QContactRelationship::Aggregates());
+            relatedContact.setId(selfId);
+            relationship.setFirst(relatedContact);
+            relationship.setSecond(tpSelf);
+#else
             relationship.setRelationshipType(QContactRelationship::Aggregates);
             relationship.setFirst(selfId);
             relationship.setSecond(tpSelf.id());
+#endif
 
             if (!mgr->saveRelationship(&relationship)) {
                 warning() << "Unable to save relationship for self contact - error:" << mgr->error();
             } else {
-                return tpSelf.localId();
+                return apiId(tpSelf);
             }
         }
     }
 
-    return QContactLocalId();
+    return ContactIdType();
 }
 
 QContact selfContact()
 {
-    static QContactLocalId selfLocalId(selfContactLocalId());
+    static ContactIdType selfLocalId(selfContactLocalId());
     static QContactFetchHint hint(contactFetchHint(true));
 
     return manager()->contact(selfLocalId, hint);
 }
 
 template<typename Debug>
-Debug output(Debug &debug, const QContactDetail &detail)
+Debug output(Debug debug, const QContactDetail &detail)
 {
+#ifdef USING_QTPIM
+    const QMap<int, QVariant> &values(detail.values());
+    QMap<int, QVariant>::const_iterator it = values.constBegin(), end = values.constEnd();
+#else
     const QVariantMap &values(detail.variantValues());
     QVariantMap::const_iterator it = values.constBegin(), end = values.constEnd();
+#endif
     for ( ; it != end; ++it) {
         debug << "\n   -" << it.key() << ":" << it.value();
     }
     return debug;
 }
 
+#ifdef USING_QTPIM
+QContactDetail::DetailType detailType(const QContactDetail &detail) { return detail.type(); }
+#else
+QString detailType(const QContactDetail &detail) { return detail.definitionName(); }
+#endif
+
 template<typename Debug>
-Debug output(Debug &debug, const QContact &contact)
+Debug output(Debug debug, const QContact &contact)
 {
     const QList<QContactDetail> &details(contact.details());
     foreach (const QContactDetail &detail, details) {
-        debug << "\n  Detail:" << detail.definitionName();
+        debug << "\n  Detail:" << detailType(detail);
         output(debug, detail);
     }
     return debug;
@@ -330,12 +458,12 @@ Debug output(Debug &debug, const QContact &contact)
 bool storeContactDetail(QContact &contact, QContactDetail &detail, const QString &location)
 {
 #ifdef DEBUG_OVERLOAD
-    debug() << "  Storing" << detail.definitionName() << "from:" << location;
+    debug() << "  Storing" << detailType(detail) << "from:" << location;
     output(debug(), detail);
 #endif
 
     if (!contact.saveDetail(&detail)) {
-        debug() << "  Failed storing" << detail.definitionName() << "from:" << location;
+        debug() << "  Failed storing" << detailType(detail) << "from:" << location;
 #ifndef DEBUG_OVERLOAD
         output(debug(), detail);
 #endif
@@ -344,21 +472,21 @@ bool storeContactDetail(QContact &contact, QContactDetail &detail, const QString
     return true;
 }
 
-QStringList contactChangesList(CDTpContact::Changes changes)
+DetailList contactChangesList(CDTpContact::Changes changes)
 {
-    QStringList rv;
+    DetailList rv;
 
     if (changes & CDTpContact::Alias) {
-        rv.append(QContactNickname::DefinitionName);
+        rv.append(detailType<QContactNickname>());
     }
     if (changes & CDTpContact::Presence) {
-        rv.append(QContactPresence::DefinitionName);
+        rv.append(detailType<QContactPresence>());
     }
     if (changes & CDTpContact::Capabilities) {
-        rv.append(QContactOnlineAccount::DefinitionName);
+        rv.append(detailType<QContactOnlineAccount>());
     }
     if (changes & CDTpContact::Avatar) {
-        rv.append(QContactAvatar::DefinitionName);
+        rv.append(detailType<QContactAvatar>());
     }
 
     return rv;
@@ -367,7 +495,7 @@ QStringList contactChangesList(CDTpContact::Changes changes)
 bool storeContact(QContact &contact, const QString &location, CDTpContact::Changes changes = CDTpContact::All)
 {
     QList<QContact> contacts;
-    QStringList updates;
+    DetailList updates;
 
     const bool minimizedUpdate((changes != CDTpContact::All) && ((changes & CDTpContact::Information) == 0));
     if (minimizedUpdate) {
@@ -376,13 +504,13 @@ bool storeContact(QContact &contact, const QString &location, CDTpContact::Chang
     }
 
 #ifdef DEBUG_OVERLOAD
-    debug() << "Storing contact" << contact.localId() << "from:" << location;
+    debug() << "Storing contact" << asString(apiId(contact)) << "from:" << location;
     output(debug(), contact);
 #endif
 
     if (minimizedUpdate) {
         if (!manager()->saveContacts(&contacts, contactChangesList(changes))) {
-            warning() << "Failed minimized storing contact" << contact.localId() << "from:" << location << "error:" << manager()->error();
+            warning() << "Failed minimized storing contact" << asString(apiId(contact)) << "from:" << location << "error:" << manager()->error();
 #ifndef DEBUG_OVERLOAD
             output(debug(), contact);
 #endif
@@ -391,7 +519,7 @@ bool storeContact(QContact &contact, const QString &location, CDTpContact::Chang
         }
     } else {
         if (!manager()->saveContact(&contact)) {
-            warning() << "Failed storing contact" << contact.localId() << "from:" << location;
+            warning() << "Failed storing contact" << asString(apiId(contact)) << "from:" << location;
 #ifndef DEBUG_OVERLOAD
             output(debug(), contact);
 #endif
@@ -401,7 +529,7 @@ bool storeContact(QContact &contact, const QString &location, CDTpContact::Chang
     return true;
 }
 
-void updateContacts(const QString &location, QList<QContact> *saveList, QList<QContactLocalId> *removeList)
+void updateContacts(const QString &location, QList<QContact> *saveList, QList<ContactIdType> *removeList)
 {
     if (saveList && !saveList->isEmpty()) {
         QElapsedTimer t;
@@ -431,7 +559,7 @@ void updateContacts(const QString &location, QList<QContact> *saveList, QList<QC
                 do {
                     int errorIndex = (*--it);
                     const QContact &badContact(batch.at(errorIndex));
-                    warning() << "Failed storing contact" << badContact.localId() << "from:" << location;
+                    warning() << "Failed storing contact" << asString(apiId(badContact)) << "from:" << location;
                     output(debug(), badContact);
                     batch.removeAt(errorIndex);
                 } while (it != begin);
@@ -444,7 +572,7 @@ void updateContacts(const QString &location, QList<QContact> *saveList, QList<QC
         QElapsedTimer t;
         t.start();
 
-        QList<QContactLocalId>::iterator it = removeList->begin(), end = removeList->end();
+        QList<ContactIdType>::iterator it = removeList->begin(), end = removeList->end();
         for ( ; it != end; ++it) {
             if (!manager()->removeContact(*it)) {
                 warning() << "Unable to remove contact";
@@ -454,7 +582,7 @@ void updateContacts(const QString &location, QList<QContact> *saveList, QList<QC
     }
 }
 
-QList<QContactLocalId> findContactIdsForAccount(const QString &accountPath)
+QList<ContactIdType> findContactIdsForAccount(const QString &accountPath)
 {
     QContactIntersectionFilter filter;
     filter << QContactTpMetadata::matchAccountId(accountPath);
@@ -471,24 +599,32 @@ QHash<QString, QContact> findExistingContacts(const QStringList &contactAddresse
     // If there is a large number of contacts, do a two-step fetch
     const int maxDirectMatches = 10;
     if (contactAddresses.count() > maxDirectMatches) {
-        QList<QContactLocalId> ids;
+        QList<ContactIdType> ids;
         QSet<QString> addressSet(contactAddresses.toSet());
 
         // First fetch all telepathy contacts, ID data only
-        hint.setDetailDefinitionsHint(QStringList() << QContactTpMetadata::DefinitionName);
+#ifdef USING_QTPIM
+        hint.setDetailTypesHint(DetailList() << QContactTpMetadata::Type);
+#else
+        hint.setDetailDefinitionsHint(DetailList() << QContactTpMetadata::DefinitionName);
+#endif
 
         foreach (const QContact &contact, manager()->contacts(matchTelepathyFilter(), QList<QContactSortOrder>(), hint)) {
-            const QString &address = contact.detail<QContactTpMetadata>().value(QContactTpMetadata::FieldContactId);
+            const QString &address = stringValue(contact.detail<QContactTpMetadata>(), QContactTpMetadata::FieldContactId);
             if (addressSet.contains(address)) {
-                ids.append(contact.localId());
+                ids.append(apiId(contact));
             }
         }
 
-        hint.setDetailDefinitionsHint(QStringList());
+#ifdef USING_QTPIM
+        hint.setDetailTypesHint(DetailList());
+#else
+        hint.setDetailDefinitionsHint(DetailList());
+#endif
 
         // Now fetch the details of the required contacts by ID
         foreach (const QContact &contact, manager()->contacts(ids, hint)) {
-            rv.insert(contact.detail<QContactTpMetadata>().value(QContactTpMetadata::FieldContactId), contact);
+            rv.insert(stringValue(contact.detail<QContactTpMetadata>(), QContactTpMetadata::FieldContactId), contact);
         }
     } else {
         // Just query the ones we need
@@ -502,7 +638,7 @@ QHash<QString, QContact> findExistingContacts(const QStringList &contactAddresse
         filter << addressFilter;
 
         foreach (const QContact &contact, manager()->contacts(filter, QList<QContactSortOrder>(), hint)) {
-            rv.insert(contact.detail<QContactTpMetadata>().value(QContactTpMetadata::FieldContactId), contact);
+            rv.insert(stringValue(contact.detail<QContactTpMetadata>(), QContactTpMetadata::FieldContactId), contact);
         }
     }
 
@@ -691,17 +827,18 @@ QStringList currentCapabilites(const Tp::CapabilitiesBase &capabilities, Tp::Con
 
 void updateContactAvatars(QContact &contact, const QString &defaultAvatarPath, const QString &largeAvatarPath, const QContactOnlineAccount &qcoa)
 {
-    static const QLatin1String contextLarge("Large");
-    static const QLatin1String contextDefault("Default");
-
     QContactAvatar defaultAvatar;
     QContactAvatar largeAvatar;
 
     foreach (const QContactAvatar &detail, contact.details<QContactAvatar>()) {
+#ifdef USING_QTPIM
+        const QList<int> &contexts(detail.contexts());
+#else
         const QStringList &contexts(detail.contexts());
-        if (contexts.contains(contextDefault)) {
+#endif
+        if (contexts.contains(QContactDetail__ContextDefault)) {
             defaultAvatar = detail;
-        } else if (contexts.contains(contextLarge)) {
+        } else if (contexts.contains(QContactDetail__ContextLarge)) {
             largeAvatar = detail;
         }
     }
@@ -714,7 +851,7 @@ void updateContactAvatars(QContact &contact, const QString &defaultAvatarPath, c
         }
     } else {
         defaultAvatar.setImageUrl(QUrl::fromLocalFile(defaultAvatarPath));
-        defaultAvatar.setContexts(contextDefault);
+        defaultAvatar.setContexts(QContactDetail__ContextDefault);
         defaultAvatar.setLinkedDetailUris(qcoa.detailUri());
         if (!storeContactDetail(contact, defaultAvatar, SRC_LOC)) {
             warning() << SRC_LOC << "Unable to save default avatar for contact:" << contact.id();
@@ -729,7 +866,7 @@ void updateContactAvatars(QContact &contact, const QString &defaultAvatarPath, c
         }
     } else {
         largeAvatar.setImageUrl(QUrl::fromLocalFile(largeAvatarPath));
-        largeAvatar.setContexts(contextLarge);
+        largeAvatar.setContexts(QContactDetail__ContextLarge);
         largeAvatar.setLinkedDetailUris(qcoa.detailUri());
         if (!storeContactDetail(contact, largeAvatar, SRC_LOC)) {
             warning() << SRC_LOC << "Unable to save large avatar for contact:" << contact.id();
@@ -833,7 +970,6 @@ CDTpContact::Changes updateAccountDetails(QContact &self, QContactOnlineAccount
         selfChanges |= CDTpContact::Presence;
     }
     if (changes & CDTpAccount::Avatar) {
-        static const QLatin1String contextDefault("Default");
         const QString avatarPath(saveAccountAvatar(accountWrapper));
 
         QContactAvatar avatar(findAvatarForAccount(self, qcoa));
@@ -847,7 +983,7 @@ CDTpContact::Changes updateAccountDetails(QContact &self, QContactOnlineAccount
             }
         } else {
             avatar.setImageUrl(QUrl::fromLocalFile(avatarPath));
-            avatar.setContexts(contextDefault);
+            avatar.setContexts(QContactDetail__ContextDefault);
 
             if (!storeContactDetail(self, avatar, SRC_LOC)) {
                 warning() << SRC_LOC << "Unable to save avatar for account:" << accountPath;
@@ -883,7 +1019,11 @@ void deleteContactDetails(QContact &existing)
     }
 }
 
+#ifdef USING_QTPIM
+typedef QHash<QString, int> Dictionary;
+#else
 typedef QHash<QString, QString> Dictionary;
+#endif
 
 Dictionary initPhoneTypes()
 {
@@ -946,6 +1086,41 @@ const Dictionary &genderTypes()
     return types;
 }
 
+#ifdef USING_QTPIM
+Dictionary initProtocolTypes()
+{
+    Dictionary types;
+
+    types.insert(QLatin1String("aim"), QContactOnlineAccount::ProtocolAim);
+    types.insert(QLatin1String("icq"), QContactOnlineAccount::ProtocolIcq);
+    types.insert(QLatin1String("irc"), QContactOnlineAccount::ProtocolIrc);
+    types.insert(QLatin1String("jabber"), QContactOnlineAccount::ProtocolJabber);
+    types.insert(QLatin1String("msn"), QContactOnlineAccount::ProtocolMsn);
+    types.insert(QLatin1String("qq"), QContactOnlineAccount::ProtocolQq);
+    types.insert(QLatin1String("skype"), QContactOnlineAccount::ProtocolSkype);
+    types.insert(QLatin1String("yahoo"), QContactOnlineAccount::ProtocolYahoo);
+
+    return types;
+}
+
+QContactOnlineAccount::Protocol protocolType(const QString &protocol)
+{
+    static Dictionary types(initProtocolTypes());
+
+    Dictionary::const_iterator it = types.find(protocol.toLower());
+    if (it != types.constEnd()) {
+        return static_cast<QContactOnlineAccount::Protocol>(*it);
+    }
+
+    return QContactOnlineAccount::ProtocolUnknown;
+}
+#else
+const QString &protocolType(const QString &protocol)
+{
+    return protocol;
+}
+#endif
+
 void updateContactDetails(QNetworkAccessManager &network, QContact &existing, CDTpContactPtr contactWrapper, CDTpContact::Changes changes)
 {
     const QString contactAddress(imAddress(contactWrapper));
@@ -1007,9 +1182,15 @@ void updateContactDetails(QNetworkAccessManager &network, QContact &existing, CD
 
             Tp::ContactInfoFieldList listContactInfo = contact->infoFields().allFields();
             if (listContactInfo.count() != 0) {
+#ifdef USING_QTPIM
+                const int defaultContext(QContactDetail::ContextOther);
+                const int homeContext(QContactDetail::ContextHome);
+                const int workContext(QContactDetail::ContextWork);
+#else
                 const QLatin1String defaultContext("Other");
                 const QLatin1String homeContext("Home");
                 const QLatin1String workContext("Work");
+#endif
 
                 QContactOrganization organizationDetail;
                 QContactName nameDetail;
@@ -1022,7 +1203,14 @@ void updateContactDetails(QNetworkAccessManager &network, QContact &existing, CD
 
                     // Extract field types
                     QStringList subTypes;
+#ifdef USING_QTPIM
+                    int detailContext = -1;
+                    const int invalidContext = -1;
+#else
                     QString detailContext;
+                    const QString invalidContext;
+#endif
+
                     foreach (const QString &param, field.parameters) {
                         if (!param.startsWith(QLatin1String("type="))) {
                             continue;
@@ -1038,7 +1226,11 @@ void updateContactDetails(QNetworkAccessManager &network, QContact &existing, CD
                     }
 
                     if (field.fieldName == QLatin1String("tel")) {
+#ifdef USING_QTPIM
+                        QList<int> selectedTypes;
+#else
                         QStringList selectedTypes;
+#endif
                         foreach (const QString &type, subTypes) {
                             Dictionary::const_iterator it = phoneTypes().find(type.toLower());
                             if (it != phoneTypes().constEnd()) {
@@ -1051,15 +1243,19 @@ void updateContactDetails(QNetworkAccessManager &network, QContact &existing, CD
                         }
 
                         QContactPhoneNumber phoneNumberDetail;
-                        phoneNumberDetail.setContexts(detailContext.isNull() ? defaultContext : detailContext);
+                        phoneNumberDetail.setContexts(detailContext == invalidContext ? defaultContext : detailContext);
                         phoneNumberDetail.setNumber(asString(field, 0));
-                        phoneNumberDetail.setSubTypes(subTypes);
+                        phoneNumberDetail.setSubTypes(selectedTypes);
 
                         if (!storeContactDetail(existing, phoneNumberDetail, SRC_LOC)) {
                             warning() << SRC_LOC << "Unable to save phone number to contact";
                         }
                     } else if (field.fieldName == QLatin1String("adr")) {
+#ifdef USING_QTPIM
+                        QList<int> selectedTypes;
+#else
                         QStringList selectedTypes;
+#endif
                         foreach (const QString &type, subTypes) {
                             Dictionary::const_iterator it = addressTypes().find(type.toLower());
                             if (it != addressTypes().constEnd()) {
@@ -1071,7 +1267,7 @@ void updateContactDetails(QNetworkAccessManager &network, QContact &existing, CD
                         QString streetAddress(asString(field, 1) + QLatin1Char('\n') + asString(field, 2));
 
                         QContactAddress addressDetail;
-                        if (!detailContext.isNull()) {
+                        if (detailContext != invalidContext) {
                             addressDetail.setContexts(detailContext);
                         }
                         if (selectedTypes.isEmpty()) {
@@ -1089,7 +1285,7 @@ void updateContactDetails(QNetworkAccessManager &network, QContact &existing, CD
                         }
                     } else if (field.fieldName == QLatin1String("email")) {
                         QContactEmailAddress emailDetail;
-                        if (!detailContext.isNull()) {
+                        if (detailContext != invalidContext) {
                             emailDetail.setContexts(detailContext);
                         }
                         emailDetail.setEmailAddress(asString(field, 0));
@@ -1099,7 +1295,7 @@ void updateContactDetails(QNetworkAccessManager &network, QContact &existing, CD
                         }
                     } else if (field.fieldName == QLatin1String("url")) {
                         QContactUrl urlDetail;
-                        if (!detailContext.isNull()) {
+                        if (detailContext != invalidContext) {
                             urlDetail.setContexts(detailContext);
                         }
                         urlDetail.setUrl(asString(field, 0));
@@ -1109,18 +1305,18 @@ void updateContactDetails(QNetworkAccessManager &network, QContact &existing, CD
                         }
                     } else if (field.fieldName == QLatin1String("title")) {
                         organizationDetail.setTitle(asString(field, 0));
-                        if (!detailContext.isNull()) {
+                        if (detailContext != invalidContext) {
                             organizationDetail.setContexts(detailContext);
                         }
                     } else if (field.fieldName == QLatin1String("role")) {
                         organizationDetail.setRole(asString(field, 0));
-                        if (!detailContext.isNull()) {
+                        if (detailContext != invalidContext) {
                             organizationDetail.setContexts(detailContext);
                         }
                     } else if (field.fieldName == QLatin1String("org")) {
                         organizationDetail.setName(asString(field, 0));
                         organizationDetail.setDepartment(asStringList(field, 1));
-                        if (!detailContext.isNull()) {
+                        if (detailContext != invalidContext) {
                             organizationDetail.setContexts(detailContext);
                         }
 
@@ -1131,7 +1327,7 @@ void updateContactDetails(QNetworkAccessManager &network, QContact &existing, CD
                         // Clear out the stored details
                         organizationDetail = QContactOrganization();
                     } else if (field.fieldName == QLatin1String("n")) {
-                        if (!detailContext.isNull()) {
+                        if (detailContext != invalidContext) {
                             nameDetail.setContexts(detailContext);
                         }
                         nameDetail.setLastName(asString(field, 0));
@@ -1142,17 +1338,21 @@ void updateContactDetails(QNetworkAccessManager &network, QContact &existing, CD
                     } else if (field.fieldName == QLatin1String("fn")) {
                         const QString fn(asString(field, 0));
                         if (!fn.isEmpty()) {
-                            if (!detailContext.isNull()) {
+                            if (detailContext != invalidContext) {
                                 nameDetail.setContexts(detailContext);
                             }
+#ifdef USING_QTPIM
+                            nameDetail.setValue(QContactName__FieldCustomLabel, fn);
+#else
                             nameDetail.setCustomLabel(fn);
+#endif
                         }
                     } else if (field.fieldName == QLatin1String("nickname")) {
                         const QString nickname(asString(field, 0));
                         if (!nickname.isEmpty()) {
                             QContactNickname nicknameDetail;
                             nicknameDetail.setNickname(nickname);
-                            if (!detailContext.isNull()) {
+                            if (detailContext != invalidContext) {
                                 nicknameDetail.setContexts(detailContext);
                             }
 
@@ -1161,14 +1361,20 @@ void updateContactDetails(QNetworkAccessManager &network, QContact &existing, CD
                             }
 
                             // Use the nickname as the customLabel if we have no 'fn' data
+#ifdef USING_QTPIM
+                            if (stringValue(nameDetail, QContactName__FieldCustomLabel).isEmpty()) {
+                                nameDetail.setValue(QContactName__FieldCustomLabel, nickname);
+                            }
+#else
                             if (nameDetail.customLabel().isEmpty()) {
                                 nameDetail.setCustomLabel(nickname);
                             }
+#endif
                         }
                     } else if (field.fieldName == QLatin1String("note") ||
                              field.fieldName == QLatin1String("desc")) {
                         QContactNote noteDetail;
-                        if (!detailContext.isNull()) {
+                        if (detailContext != invalidContext) {
                             noteDetail.setContexts(detailContext);
                         }
                         noteDetail.setNote(asString(field, 0));
@@ -1204,7 +1410,11 @@ void updateContactDetails(QNetworkAccessManager &network, QContact &existing, CD
                         Dictionary::const_iterator it = genderTypes().find(type.toLower());
                         if (it != addressTypes().constEnd()) {
                             QContactGender genderDetail;
+#ifdef USING_QTPIM
+                            genderDetail.setGender(static_cast<QContactGender::GenderField>(*it));
+#else
                             genderDetail.setGender(*it);
+#endif
 
                             if (!storeContactDetail(existing, genderDetail, SRC_LOC)) {
                                 warning() << SRC_LOC << "Unable to save gender to contact";
@@ -1311,7 +1521,7 @@ void CDTpStorage::addNewAccount(QContact &self, CDTpAccountPtr accountWrapper)
     newAccount.setValue(QContactOnlineAccount__FieldAccountPath, accountPath);
     newAccount.setValue(QContactOnlineAccount__FieldEnabled, asString(account->isEnabled()));
     newAccount.setAccountUri(account->normalizedName());
-    newAccount.setProtocol(account->protocolName());
+    newAccount.setProtocol(protocolType(account->protocolName()));
     newAccount.setServiceProvider(account->serviceName());
 
     addIconPath(newAccount, account);
@@ -1342,7 +1552,7 @@ void CDTpStorage::addNewAccount(QContact &self, CDTpAccountPtr accountWrapper)
 
 void CDTpStorage::removeExistingAccount(QContact &self, QContactOnlineAccount &existing)
 {
-    const QString accountPath(existing.value(QContactOnlineAccount__FieldAccountPath));
+    const QString accountPath(stringValue(existing, QContactOnlineAccount__FieldAccountPath));
 
     // Remove any contacts derived from this account
     if (!manager()->removeContacts(findContactIdsForAccount(accountPath))) {
@@ -1405,7 +1615,7 @@ bool CDTpStorage::initializeNewContact(QContact &newContact, CDTpAccountPtr acco
     newAccount.setValue(QContactOnlineAccount__FieldAccountPath, accountPath);
     newAccount.setValue(QContactOnlineAccount__FieldEnabled, asString(true));
     newAccount.setAccountUri(contactId);
-    newAccount.setProtocol(account->protocolName());
+    newAccount.setProtocol(protocolType(account->protocolName()));
     newAccount.setServiceProvider(account->serviceName());
 
     addIconPath(newAccount, account);
@@ -1433,7 +1643,7 @@ bool CDTpStorage::initializeNewContact(QContact &newContact, CDTpAccountPtr acco
 void CDTpStorage::updateContactChanges(CDTpContactPtr contactWrapper, CDTpContact::Changes changes)
 {
     QList<QContact> saveList;
-    QList<QContactLocalId> removeList;
+    QList<ContactIdType> removeList;
 
     QContact existing = findExistingContact(imAddress(contactWrapper));
     updateContactChanges(contactWrapper, changes, existing, &saveList, &removeList);
@@ -1441,7 +1651,7 @@ void CDTpStorage::updateContactChanges(CDTpContactPtr contactWrapper, CDTpContac
     updateContacts(SRC_LOC, &saveList, &removeList);
 }
 
-void CDTpStorage::updateContactChanges(CDTpContactPtr contactWrapper, CDTpContact::Changes changes, QContact &existing, QList<QContact> *saveList, QList<QContactLocalId> *removeList)
+void CDTpStorage::updateContactChanges(CDTpContactPtr contactWrapper, CDTpContact::Changes changes, QContact &existing, QList<QContact> *saveList, QList<ContactIdType> *removeList)
 {
     const QString accountPath(imAccount(contactWrapper));
     const QString contactAddress(imAddress(contactWrapper));
@@ -1449,7 +1659,7 @@ void CDTpStorage::updateContactChanges(CDTpContactPtr contactWrapper, CDTpContac
     if (changes & CDTpContact::Deleted) {
         // This contact has been deleted
         if (!existing.isEmpty()) {
-            removeList->append(existing.localId());
+            removeList->append(apiId(existing));
         }
     } else {
         if (existing.isEmpty()) {
@@ -1513,7 +1723,7 @@ void CDTpStorage::updateAccountChanges(QContactOnlineAccount &qcoa, CDTpAccountP
         QHash<QString, QContact> existingContacts = findExistingContacts(contactAddresses);
 
         QList<QContact> saveList;
-        QList<QContactLocalId> removeList;
+        QList<ContactIdType> removeList;
 
         foreach (CDTpContactPtr contactWrapper, accountWrapper->contacts()) {
             const QString address = imAddress(accountPath, contactWrapper->contact()->id());
@@ -1547,7 +1757,7 @@ void CDTpStorage::updateAccountChanges(QContactOnlineAccount &qcoa, CDTpAccountP
         updateContacts(SRC_LOC, &saveList, &removeList);
     } else {
         // Set presence to unknown for all contacts of this account
-        foreach (const QContactLocalId &contactId, findContactIdsForAccount(accountPath)) {
+        foreach (const ContactIdType &contactId, findContactIdsForAccount(accountPath)) {
             QContact existing = manager()->contact(contactId);
 
             QContactPresence presence = existing.detail<QContactPresence>();
@@ -1596,7 +1806,7 @@ void CDTpStorage::syncAccounts(const QList<CDTpAccountPtr> &accounts)
     QSet<QString> removalPaths;
 
     foreach (QContactOnlineAccount existingAccount, self.details<QContactOnlineAccount>()) {
-        const QString existingPath(existingAccount.value(QContactOnlineAccount__FieldAccountPath));
+        const QString existingPath(stringValue(existingAccount, QContactOnlineAccount__FieldAccountPath));
         if (existingPath.isEmpty()) {
             warning() << SRC_LOC << "No path for existing account:" << existingPath;
             continue;
@@ -1619,7 +1829,7 @@ void CDTpStorage::syncAccounts(const QList<CDTpAccountPtr> &accounts)
 
     // Remove invalid accounts
     foreach (QContactOnlineAccount existingAccount, self.details<QContactOnlineAccount>()) {
-        const QString existingPath(existingAccount.value(QContactOnlineAccount__FieldAccountPath));
+        const QString existingPath(stringValue(existingAccount, QContactOnlineAccount__FieldAccountPath));
         if (removalPaths.contains(existingPath)) {
             removeExistingAccount(self, existingAccount);
         }
@@ -1649,7 +1859,7 @@ void CDTpStorage::createAccount(CDTpAccountPtr accountWrapper)
 
     // Ensure this account does not already exist
     foreach (const QContactOnlineAccount &existingAccount, self.details<QContactOnlineAccount>()) {
-        const QString existingPath(existingAccount.value(QContactOnlineAccount__FieldAccountPath));
+        const QString existingPath(stringValue(existingAccount, QContactOnlineAccount__FieldAccountPath));
         if (existingPath == accountPath) {
             warning() << SRC_LOC << "Path already exists for create account:" << existingPath;
             return;
@@ -1669,7 +1879,7 @@ void CDTpStorage::createAccount(CDTpAccountPtr accountWrapper)
     QHash<QString, QContact> existingContacts = findExistingContacts(contactAddresses);
 
     QList<QContact> saveList;
-    QList<QContactLocalId> removeList;
+    QList<ContactIdType> removeList;
 
     // Add any contacts already present for this account
     foreach (CDTpContactPtr contactWrapper, accountWrapper->contacts()) {
@@ -1700,7 +1910,7 @@ void CDTpStorage::updateAccount(CDTpAccountPtr accountWrapper, CDTpAccount::Chan
     debug() << SRC_LOC << "Update account:" << accountPath;
 
     foreach (QContactOnlineAccount existingAccount, self.details<QContactOnlineAccount>()) {
-        const QString existingPath(existingAccount.value(QContactOnlineAccount__FieldAccountPath));
+        const QString existingPath(stringValue(existingAccount, QContactOnlineAccount__FieldAccountPath));
         if (existingPath == accountPath) {
             updateAccountChanges(existingAccount, accountWrapper, changes);
             return;
@@ -1725,7 +1935,7 @@ void CDTpStorage::removeAccount(CDTpAccountPtr accountWrapper)
     debug() << SRC_LOC << "Remove account:" << accountPath;
 
     foreach (QContactOnlineAccount existingAccount, self.details<QContactOnlineAccount>()) {
-        const QString existingPath(existingAccount.value(QContactOnlineAccount__FieldAccountPath));
+        const QString existingPath(stringValue(existingAccount, QContactOnlineAccount__FieldAccountPath));
         if (existingPath == accountPath) {
             removeExistingAccount(self, existingAccount);
 
@@ -1751,7 +1961,7 @@ void CDTpStorage::syncAccountContacts(CDTpAccountPtr accountWrapper)
     debug() << SRC_LOC << "Sync contacts account:" << accountPath;
 
     foreach (QContactOnlineAccount existingAccount, self.details<QContactOnlineAccount>()) {
-        const QString existingPath(existingAccount.value(QContactOnlineAccount__FieldAccountPath));
+        const QString existingPath(stringValue(existingAccount, QContactOnlineAccount__FieldAccountPath));
         if (existingPath == accountPath) {
             updateAccountChanges(existingAccount, accountWrapper, CDTpAccount::Enabled);
             return;
@@ -1790,7 +2000,7 @@ void CDTpStorage::syncAccountContacts(CDTpAccountPtr accountWrapper, const QList
     QHash<QString, QContact> existingContacts = findExistingContacts(contactAddresses);
 
     QList<QContact> saveList;
-    QList<QContactLocalId> removeList;
+    QList<ContactIdType> removeList;
 
     foreach (const CDTpContactPtr &contactWrapper, contactsAdded) {
         const QString address = imAddress(accountPath, contactWrapper->contact()->id());
@@ -1852,13 +2062,13 @@ void CDTpStorage::removeAccountContacts(CDTpAccountPtr accountWrapper, const QSt
         imAddressList.append(imAddress(accountPath, id));
     }
 
-    QList<QContactLocalId> removeIds;
+    QList<ContactIdType> removeIds;
 
     // Find any contacts matching the supplied ID list
     foreach (const QContact &existing, manager()->contacts(findContactIdsForAccount(accountPath))) {
         QContactTpMetadata metadata = existing.detail<QContactTpMetadata>();
         if (imAddressList.contains(metadata.contactId())) {
-            removeIds.append(existing.localId());
+            removeIds.append(apiId(existing));
         }
     }
 
@@ -1897,7 +2107,7 @@ void CDTpStorage::onUpdateQueueTimeout()
     QHash<QString, QContact> existingContacts = findExistingContacts(contactAddresses);
 
     QList<QContact> saveList;
-    QList<QContactLocalId> removeList;
+    QList<ContactIdType> removeList;
 
     for (it = mUpdateQueue.constBegin(); it != end; ++it) {
         CDTpContactPtr contactWrapper = it.key();
diff --git a/plugins/telepathy/cdtpstorage.h b/plugins/telepathy/cdtpstorage.h
index 8716935..abfecee 100644
--- a/plugins/telepathy/cdtpstorage.h
+++ b/plugins/telepathy/cdtpstorage.h
@@ -36,7 +36,11 @@
 #include "cdtpaccount.h"
 #include "cdtpcontact.h"
 
+#ifdef USING_QTPIM
+QTCONTACTS_USE_NAMESPACE
+#else
 QTM_USE_NAMESPACE
+#endif
 
 class CDTpStorage : public QObject
 {
@@ -76,7 +80,11 @@ private:
     void updateAccountChanges(QContactOnlineAccount &qcoa, CDTpAccountPtr accountWrapper, CDTpAccount::Changes changes);
 
     bool initializeNewContact(QContact &newContact, CDTpAccountPtr accountWrapper, const QString &contactId);
+#ifdef USING_QTPIM
+    void updateContactChanges(CDTpContactPtr contactWrapper, CDTpContact::Changes changes, QContact &existing, QList<QContact> *saveList, QList<QContactId> *removeList);
+#else
     void updateContactChanges(CDTpContactPtr contactWrapper, CDTpContact::Changes changes, QContact &existing, QList<QContact> *saveList, QList<QContactLocalId> *removeList);
+#endif
     void updateContactChanges(CDTpContactPtr contactWrapper, CDTpContact::Changes changes);
 
 private:
diff --git a/plugins/telepathy/telepathy.pro b/plugins/telepathy/telepathy.pro
index 5e4c944..07f43cd 100644
--- a/plugins/telepathy/telepathy.pro
+++ b/plugins/telepathy/telepathy.pro
@@ -24,8 +24,18 @@ TEMPLATE = lib
 QT -= gui
 QT += dbus network
 
-CONFIG += plugin mobility
-MOBILITY += contacts
+CONFIG += plugin link_pkgconfig
+
+equals(QT_MAJOR_VERSION, 4) {
+    CONFIG += mobility
+    MOBILITY += contacts
+    PKGCONFIG += TelepathyQt4
+}
+equals(QT_MAJOR_VERSION, 5) {
+    PKGCONFIG += Qt5Contacts
+    PKGCONFIG += TelepathyQt5
+    DEFINES *= USING_QTPIM
+}
 
 system(qdbusxml2cpp -c BuddyManagementAdaptor -a buddymanagementadaptor.h:buddymanagementadaptor.cpp com.nokia.contacts.buddymanagement.xml)
 
@@ -34,8 +44,6 @@ QMAKE_CXXFLAGS += -c -g  --coverage -ftest-coverage -fprofile-arcs
 LIBS += -lgcov
 }
 
-CONFIG += link_pkgconfig
-PKGCONFIG += TelepathyQt4 
 DEFINES += QT_NO_CAST_TO_ASCII QT_NO_CAST_FROM_ASCII
 
 INCLUDEPATH += $$TOP_SOURCEDIR/src
@@ -63,11 +71,14 @@ SOURCES  = cdtpaccount.cpp \
     buddymanagementadaptor.cpp \
     cdtpavatarupdate.cpp
 
+equals(QT_MAJOR_VERSION, 4): VERSIONED_PACKAGENAME=contactsd-1.0
+equals(QT_MAJOR_VERSION, 5): VERSIONED_PACKAGENAME=contactsd-qt5-1.0
+
 TARGET = telepathyplugin
-target.path = $$LIBDIR/contactsd-1.0/plugins
+target.path = $$LIBDIR/$${VERSIONED_PACKAGENAME}/plugins
 
 xml.files = com.nokia.contacts.buddymanagement.xml
-xml.path = $$INCLUDEDIR/contactsd-1.0
+xml.path = $$INCLUDEDIR/$${VERSIONED_PACKAGENAME}
 
 INSTALLS += target xml
 
diff --git a/rpm/contactsd-qt5.desktop b/rpm/contactsd-qt5.desktop
new file mode 100644
index 0000000..efa2dec
--- /dev/null
+++ b/rpm/contactsd-qt5.desktop
@@ -0,0 +1,7 @@
+[Desktop Entry]
+Type=Application
+Name=Contacts daemon
+Exec=/usr/bin/contactsd-qt5
+Comment=Telepathy contacts observer
+X-Moblin-Priority=Low
+X-Meego-Watchdog=Restart
diff --git a/rpm/contactsd-qt5.service b/rpm/contactsd-qt5.service
new file mode 100644
index 0000000..576d690
--- /dev/null
+++ b/rpm/contactsd-qt5.service
@@ -0,0 +1,9 @@
+[Unit]
+Description=Contacts daemon
+After=xorg.target
+Requires=dbus.socket xorg.target
+
+[Service]
+ExecStart=/usr/bin/contactsd-qt5
+
+
diff --git a/rpm/contactsd-qt5.spec b/rpm/contactsd-qt5.spec
new file mode 100644
index 0000000..078eaad
--- /dev/null
+++ b/rpm/contactsd-qt5.spec
@@ -0,0 +1,80 @@
+Name: contactsd-qt5
+Version: 1.4.0
+Release: 1
+Summary: Telepathy <> tracker bridge for contacts
+Group: System/Libraries
+URL: https://github.com/nemomobile/contactsd
+License: LGPLv2
+Source0: %{name}-%{version}.tar.bz2
+Source1: contactsd-qt5.desktop
+Source2: contactsd-qt5.service
+BuildRequires: pkgconfig(Qt5Core)
+BuildRequires: pkgconfig(TelepathyQt5)
+BuildRequires: pkgconfig(Qt5Contacts)
+# mlite required only for tests
+BuildRequires: pkgconfig(mlite5)
+BuildRequires: pkgconfig(mlocale5)
+BuildRequires: pkgconfig(libmkcal-qt5)
+BuildRequires: pkgconfig(libkcalcoren-qt5)
+BuildRequires: pkgconfig(telepathy-glib)
+
+%description
+contactsd is a service for collecting and observing changes in roster list
+from all the users telepathy accounts (buddies, their status and presence
+information), and store it to tracker.
+
+%files
+%defattr(-,root,root,-)
+%config %{_sysconfdir}/xdg/autostart/contactsd-qt5.desktop
+%{_libdir}/systemd/user/contactsd-qt5.service
+%{_bindir}/contactsd-qt5
+%{_libdir}/contactsd-qt5-1.0/plugins/*.so
+# we currently don't have a backup framework
+%exclude /usr/share/backup-framework/applications/contactsd-qt5.conf
+
+
+%package devel
+Summary: Development files for %{name}
+Group: Development/Libraries
+Requires: %{name} = %{version}-%{release}
+
+%description devel
+%{summary}.
+
+%files devel
+%defattr(-,root,root,-)
+%{_includedir}/contactsd-qt5-1.0/*
+%dir %{_includedir}/contactsd-qt5-1.0
+%{_libdir}/pkgconfig/*.pc
+
+
+%package tests
+Summary: Tests for %{name}
+Group: Development/Libraries
+Requires: %{name} = %{version}-%{release}
+
+%description tests
+%{summary}.
+
+%files tests
+%defattr(-,root,root,-)
+/opt/tests/%{name}
+
+
+%prep
+%setup -q -n %{name}-%{version}
+
+%build
+export QT_SELECT=5
+./configure --bindir %{_bindir} --libdir %{_libdir} --includedir %{_includedir}
+%qmake5
+make %{?_smp_mflags}
+
+
+%install
+make INSTALL_ROOT=%{buildroot} install
+mkdir -p %{buildroot}/%{_sysconfdir}/xdg/autostart
+cp %{SOURCE1} %{buildroot}/%{_sysconfdir}/xdg/autostart/
+mkdir -p %{buildroot}/%{_libdir}/systemd/user/
+cp %{SOURCE2} %{buildroot}/%{_libdir}/systemd/user/
+
diff --git a/rpm/contactsd.spec b/rpm/contactsd.spec
index b31ce2a..ea7b5f2 100644
--- a/rpm/contactsd.spec
+++ b/rpm/contactsd.spec
@@ -1,5 +1,5 @@
 Name: contactsd
-Version: 1.3.0
+Version: 1.4.0
 Release: 1
 Summary: Telepathy <> tracker bridge for contacts
 Group: System/Libraries
diff --git a/src/base-plugin.cpp b/src/base-plugin.cpp
index 974396f..5c3de4f 100644
--- a/src/base-plugin.cpp
+++ b/src/base-plugin.cpp
@@ -24,7 +24,11 @@
 #include "base-plugin.h"
 #include "debug.h"
 
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+#include <QStandardPaths>
+#else
 #include <QDesktopServices>
+#endif
 
 namespace Contactsd
 {
@@ -37,7 +41,11 @@ const QString BasePlugin::metaDataKeyComment = QString::fromLatin1("comment");
 QDir
 BasePlugin::cacheDir()
 {
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+    QString cacheRoot = QStandardPaths::writableLocation(QStandardPaths::CacheLocation);
+#else
     QString cacheRoot = QDesktopServices::storageLocation(QDesktopServices::CacheLocation);
+#endif
 
     if (cacheRoot.isEmpty()) {
         cacheRoot = QDir::home().filePath(QLatin1String(".cache"));
diff --git a/src/contactsd.cpp b/src/contactsd.cpp
index c7367f1..523ea68 100644
--- a/src/contactsd.cpp
+++ b/src/contactsd.cpp
@@ -32,6 +32,7 @@
 #include "debug.h"
 
 #include <unistd.h>
+#include <errno.h>
 #include <sys/socket.h>
 
 using namespace Contactsd;
@@ -106,7 +107,9 @@ void ContactsDaemon::unixSignalHandler(int)
 {
     // Write a byte on the socket to activate the socket listener
     char a = 1;
-    ::write(sigFd[0], &a, sizeof(a));
+    if (::write(sigFd[0], &a, sizeof(a)) != sizeof(a)) {
+        warning() << "Unable to write to sigFd" << errno;
+    }
 }
 
 void ContactsDaemon::onUnixSignalReceived()
@@ -116,7 +119,9 @@ void ContactsDaemon::onUnixSignalReceived()
 
     // Empty the socket buffer
     char dummy;
-    ::read(sigFd[1], &dummy, sizeof(dummy));
+    if (::read(sigFd[1], &dummy, sizeof(dummy)) != sizeof(dummy)) {
+        warning() << "Unable to complete read from sigFd" << errno;
+    }
 
     debug() << "Received quit signal";
 
diff --git a/src/contactsdpluginloader.cpp b/src/contactsdpluginloader.cpp
index beffaef..f9b11e9 100644
--- a/src/contactsdpluginloader.cpp
+++ b/src/contactsdpluginloader.cpp
@@ -39,30 +39,42 @@ const int IMPORT_TIMEOUT = 5 * 60 * 1000;
 // alive check timeout is 30 seconds
 const int ALIVE_TIMEOUT = 30 * 1000;
 
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+#define INSTALL_HANDLER(x) qInstallMessageHandler(x)
+#else
+#define INSTALL_HANDLER(x) qInstallMsgHandler(x)
+#endif
+
 class MsgHandlerGuard
 {
 private:
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+    const QtMessageHandler m_msgHandler;
+#else
     const QtMsgHandler m_msgHandler;
+#endif
     const QString m_context;
 
 public:
     MsgHandlerGuard(const QString &context)
-        : m_msgHandler(qInstallMsgHandler(0))
+        : m_msgHandler(INSTALL_HANDLER(0))
         , m_context(context)
     {
         // we had to cheat a bit to lookup the handler - there is no decicated mechanism
-        qInstallMsgHandler(m_msgHandler);
+        INSTALL_HANDLER(m_msgHandler);
     }
 
     ~MsgHandlerGuard()
     {
-        if (qInstallMsgHandler(m_msgHandler) != m_msgHandler) {
+        if (INSTALL_HANDLER(m_msgHandler) != m_msgHandler) {
             warning() << "Message handler got modified by"
                       << m_context << " - don't do that!";
         }
     }
 };
 
+#undef INSTALL_HANDLER
+
 ContactsdPluginLoader::ContactsdPluginLoader()
     : mImportTimer(0)
     , mCheckAliveTimer(0)
diff --git a/src/debug.h b/src/debug.h
index a0e0bc3..51fa1f3 100644
--- a/src/debug.h
+++ b/src/debug.h
@@ -118,8 +118,11 @@ inline Debug warning()
     return enabledWarning();
 }
 
+#if QT_VERSION < QT_VERSION_CHECK(5, 0, 0)
+// Conflicts with the definitions of qDebug/qWarning in qt5
 #define debug() ((enabledDebug().nospace() << __func__ << ", line " << __LINE__ << ":").space())
 #define warning() ((enabledWarning().nospace() << __func__ << ", line " << __LINE__ << ":").space())
+#endif
 
 #else /* #ifdef ENABLE_DEBUG */
 
diff --git a/src/main.cpp b/src/main.cpp
index 21027d1..3dd3825 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -33,20 +33,37 @@
 
 using namespace Contactsd;
 
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+static QtMessageHandler defaultMsgHandler = 0;
+static QtMsgType messageThreshold = QtWarningMsg;
+#else
 static QtMsgHandler defaultMsgHandler = 0;
 static QtMsgType messageThreshold = QtWarningMsg;
+#endif
 static FILE *messageLog = NULL;
 
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+static void customMessageHandler(QtMsgType type, const QMessageLogContext &ctxt, const QString &msgStr)
+#else
 static void customMessageHandler(QtMsgType type, const char *msg)
+#endif
 {
     if (type < messageThreshold) {
         return; // no debug messages please
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+    const char *msg = msgStr.toLocal8Bit().constData();
+#endif
+
     // Actually qInstallMsgHandler() returned null in main() when
     // I checked, so defaultMsgHandler should be null - but let's be careful.
     if (defaultMsgHandler) {
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+        defaultMsgHandler(type, ctxt, msgStr);
+#else
         defaultMsgHandler(type, msg);
+#endif
     } else {
         fprintf(stderr, "%s\n", msg);
     }
@@ -89,7 +106,7 @@ static void setupUnixSignalHandlers()
     sigterm.sa_flags = SA_RESTART;
 
     if (sigaction(SIGTERM, &sigterm, 0) < 0) {
-        qWarning() << "Could not setup signal handler for SIGTERM";
+        warning() << "Could not setup signal handler for SIGTERM";
         return;
     }
 
@@ -98,7 +115,7 @@ static void setupUnixSignalHandlers()
     sigint.sa_flags = SA_RESTART;
 
     if (sigaction(SIGINT, &sigint, 0) < 0) {
-        qWarning() << "Could not setup signal handler for SIGINT";
+        warning() << "Could not setup signal handler for SIGINT";
         return;
     }
 }
@@ -129,7 +146,7 @@ int main(int argc, char **argv)
             value.replace(" ", ",");
             plugins << value.split(",", QString::SkipEmptyParts);
         } else if (arg == "--version") {
-            qDebug() << "contactsd version" << VERSION;
+            debug() << "contactsd version" << VERSION;
             return 0;
         } else if (arg == "--help") {
             usage();
@@ -144,7 +161,7 @@ int main(int argc, char **argv)
 
             logFileName = args.at(i);
         } else {
-            qWarning() << "Invalid argument" << arg;
+            warning() << "Invalid argument" << arg;
             usage();
             return -1;
         }
@@ -159,7 +176,11 @@ int main(int argc, char **argv)
         messageLog = fopen(qPrintable(logFileName), "w");
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+    defaultMsgHandler = qInstallMessageHandler(customMessageHandler);
+#else
     defaultMsgHandler = qInstallMsgHandler(customMessageHandler);
+#endif
 
     enableDebug(logConsole);
     debug() << "contactsd version" << VERSION << "started";
diff --git a/src/src.pro b/src/src.pro
index c6b4396..147f7a5 100644
--- a/src/src.pro
+++ b/src/src.pro
@@ -21,7 +21,10 @@
 # conditions contained in a signed written agreement between you and Nokia.
 
 TEMPLATE = app
-TARGET = contactsd
+equals(QT_MAJOR_VERSION, 4): TARGET = contactsd
+equals(QT_MAJOR_VERSION, 5): TARGET = contactsd-qt5
+
+VERSIONED_TARGET = $$TARGET-1.0
 
 QT += dbus
 QT += gui # for QDesktopServices
@@ -50,15 +53,15 @@ SOURCES += main.cpp \
 
 DEFINES += VERSION=\\\"$${VERSION}\\\"
 DEFINES += CONTACTSD_LOG_DIR=\\\"$$LOCALSTATEDIR/log\\\"
-DEFINES += CONTACTSD_PLUGINS_DIR=\\\"$$LIBDIR/contactsd-1.0/plugins\\\"
+DEFINES += CONTACTSD_PLUGINS_DIR=\\\"$$LIBDIR/$${VERSIONED_TARGET}/plugins\\\"
 
 headers.files = BasePlugin base-plugin.h \
     Debug debug.h \
     ImportStateConst importstateconst.h
-headers.path = $$INCLUDEDIR/contactsd-1.0/Contactsd
+headers.path = $$INCLUDEDIR/$${VERSIONED_TARGET}/Contactsd
 
 xml.files = com.nokia.contacts.importprogress.xml
-xml.path = $$INCLUDEDIR/contactsd-1.0
+xml.path = $$INCLUDEDIR/$${VERSIONED_TARGET}
 
 target.path = $$BINDIR
 INSTALLS += target headers xml
diff --git a/tests/common/packagename.pri b/tests/common/packagename.pri
new file mode 100644
index 0000000..1458a55
--- /dev/null
+++ b/tests/common/packagename.pri
@@ -0,0 +1,2 @@
+equals(QT_MAJOR_VERSION, 4): PACKAGENAME=contactsd
+equals(QT_MAJOR_VERSION, 5): PACKAGENAME=contactsd-qt5
diff --git a/tests/common/test-common.pri b/tests/common/test-common.pri
index c5f008f..1699a98 100644
--- a/tests/common/test-common.pri
+++ b/tests/common/test-common.pri
@@ -21,3 +21,5 @@
 # conditions contained in a signed written agreement between you and Nokia.
 
 INCLUDEPATH += $$PWD
+
+include(packagename.pri)
diff --git a/tests/tests.pro b/tests/tests.pro
index 12bb0ae..49c6994 100644
--- a/tests/tests.pro
+++ b/tests/tests.pro
@@ -20,6 +20,8 @@
 # Alternatively, this file may be used in accordance with the terms and
 # conditions contained in a signed written agreement between you and Nokia.
 
+include(common/packagename.pri)
+
 TEMPLATE = subdirs
 CONFIG += ordered
 
@@ -32,12 +34,12 @@ testxml.commands = sh $$PWD/mktests.sh $$UNIT_TESTS >$@ || rm -f $@
 testxml.depends = $$UNIT_TESTS
 
 install_testxml.files = $$testxml.target
-install_testxml.path = /opt/tests/contactsd/test-definition/
+install_testxml.path = /opt/tests/$${PACKAGENAME}/test-definition/
 install_testxml.depends = $$testxml.target
 install_testxml.CONFIG = no_check_exist
 
 install_extrascripts.files = with-session-bus.sh session.conf
-install_extrascripts.path = /opt/tests/contactsd/
+install_extrascripts.path = /opt/tests/$${PACKAGENAME}/
 install_extrascripts.depends = $$UNIT_TESTS
 install_extrascripts.CONFIG = no_check_exist
 
diff --git a/tests/ut_birthdayplugin/test-birthday-plugin.cpp b/tests/ut_birthdayplugin/test-birthday-plugin.cpp
index f66b99f..b61e84d 100644
--- a/tests/ut_birthdayplugin/test-birthday-plugin.cpp
+++ b/tests/ut_birthdayplugin/test-birthday-plugin.cpp
@@ -54,6 +54,13 @@ static void loopWait(int ms)
     loop.exec();
 }
 
+#ifdef USING_QTPIM
+QContactId apiId(const QContact &contact) { return contact.id(); }
+#else
+QContactLocalId apiId(const QContact &contact) { return contact.localId(); }
+#endif
+
+
 TestBirthdayPlugin::TestBirthdayPlugin(QObject *parent) :
     QObject(parent),
     mManager(0)
@@ -62,10 +69,7 @@ TestBirthdayPlugin::TestBirthdayPlugin(QObject *parent) :
 
 void TestBirthdayPlugin::init()
 {
-    const QLatin1String trackerManagerName = QLatin1String("tracker");
-
-    mManager = new QContactManager(trackerManagerName, QMap<QString, QString>(), this);
-    QVERIFY2(mManager->managerName() == trackerManagerName, "Unable to initialise QContactManager");
+    mManager = new QContactManager;
 }
 
 void TestBirthdayPlugin::initTestCase()
@@ -79,7 +83,7 @@ void TestBirthdayPlugin::testAddAndRemoveBirthday()
 
     // Add contact with birthday to tracker.
     QContactName contactName;
-    contactName.setCustomLabel(contactID);
+    contactName.setFirstName(contactID);
     QContactBirthday contactBirthday;
     contactBirthday.setDateTime(contactBirthDate);
     QContact contact;
@@ -104,7 +108,7 @@ void TestBirthdayPlugin::testAddAndRemoveBirthday()
     QCOMPARE(countCalendarEvents(eventList, contact), 1);
 
     // Delete the contact and see if the birthday is also deleted.
-    QVERIFY2(mManager->removeContact(contact.localId()), "Unable to delete test contact from tracker database");
+    QVERIFY2(mManager->removeContact(apiId(contact)), "Unable to delete test contact from tracker database");
 
     // Wait until calendar event gets to calendar.
     loopWait(calendarTimeout);
@@ -125,7 +129,7 @@ void TestBirthdayPlugin::testChangeBirthday()
 
     // Add contact with birthday to tracker.
     QContactName contactName;
-    contactName.setCustomLabel(contactID);
+    contactName.setFirstName(contactID);
     QContactBirthday contactBirthday;
     contactBirthday.setDateTime(contactBirthDate);
     QContact contact;
@@ -173,7 +177,7 @@ void TestBirthdayPlugin::testChangeName()
 
     // Add contact with birthday to tracker.
     QContactName contactName;
-    contactName.setCustomLabel(contactID);
+    contactName.setFirstName(contactID);
     QContactBirthday contactBirthday;
     contactBirthday.setDateTime(contactBirthDate);
     QContact contact;
@@ -199,10 +203,10 @@ void TestBirthdayPlugin::testChangeName()
 
     // Change the contact name and see if the calendar is updated.
     const QString newContactID = QUuid::createUuid().toString();
-    contactName.setCustomLabel(newContactID);
+    contactName.setFirstName(newContactID);
     QVERIFY(contact.saveDetail(&contactName));
     // TODO: Should it be necessary to refetch the contact to get the synthesised displayLabel?
-    contact = mManager->contact(contact.localId());
+    contact = mManager->contact(apiId(contact));
     QVERIFY2(mManager->saveContact(&contact), "Unable to update test contact in tracker");
 
     // Wait until calendar event gets to calendar.
@@ -277,7 +281,7 @@ void TestBirthdayPlugin::testLeapYears()
 
     // Add contact with birthday to tracker.
     QContactName contactName;
-    contactName.setCustomLabel(contactID);
+    contactName.setFirstName(contactID);
     QContactBirthday contactBirthday;
     contactBirthday.setDate(contactBirthDate);
     QContact contact;
@@ -327,9 +331,9 @@ void TestBirthdayPlugin::cleanup()
 {
     // Remove all contacts modified during the test run.
     // This could fail if the contacts were already removed, so the response is ignored.
-    mManager->removeContacts(mContactLocalIDs.toList());
+    mManager->removeContacts(mContactIDs.toList());
 
-    mContactLocalIDs.clear();
+    mContactIDs.clear();
 
     delete mManager;
 
@@ -349,7 +353,11 @@ KCalCore::Event::List TestBirthdayPlugin::findCalendarEvents(const KCalCore::Eve
 
     Q_FOREACH(const KCalCore::Event::Ptr event, eventList) {
         if(event->dtStart().date() == contact.detail<QContactBirthday>().date()) {
+#ifdef USING_QTPIM
+            if(event->summary() == contact.detail<QContactDisplayLabel>().label()) {
+#else
             if(event->summary() == contact.displayLabel()) {
+#endif
                 matches += event;
             }
         }
@@ -363,7 +371,7 @@ bool TestBirthdayPlugin::saveContact(QContact &contact)
     const bool success = mManager->saveContact(&contact);
 
     if (success) {
-        mContactLocalIDs.insert(contact.localId());
+        mContactIDs.insert(apiId(contact));
     }
 
     return success;
diff --git a/tests/ut_birthdayplugin/test-birthday-plugin.h b/tests/ut_birthdayplugin/test-birthday-plugin.h
index 2faf374..e354b36 100644
--- a/tests/ut_birthdayplugin/test-birthday-plugin.h
+++ b/tests/ut_birthdayplugin/test-birthday-plugin.h
@@ -32,11 +32,18 @@
 #include <QContact>
 #include <QContactManager>
 
+#ifdef USING_QTPIM
+QTCONTACTS_USE_NAMESPACE
+#else
 QTM_USE_NAMESPACE
+#endif
 
 class TestBirthdayPlugin : public QObject
 {
     Q_OBJECT
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+    Q_PLUGIN_METADATA(IID "org.nemomobile.contactsd.test-birthday")
+#endif
 
 public:
     explicit TestBirthdayPlugin(QObject *parent = 0);
@@ -65,7 +72,11 @@ private:
 
 private:
     QContactManager *mManager;
-    QSet<QContactLocalId> mContactLocalIDs;
+#ifdef USING_QTPIM
+    QSet<QContactId> mContactIDs;
+#else
+    QSet<QContactLocalId> mContactIDs;
+#endif
 };
 
 #endif // TEST_BIRTHDAYPLUGIN_H
diff --git a/tests/ut_birthdayplugin/tests.pri b/tests/ut_birthdayplugin/tests.pri
index 7a3c408..b50f384 100644
--- a/tests/ut_birthdayplugin/tests.pri
+++ b/tests/ut_birthdayplugin/tests.pri
@@ -22,24 +22,24 @@
 
 daemon.target = with-daemon.sh
 daemon.depends = $$PWD/with-daemon.sh.in
-daemon.path = /opt/tests/contactsd
+daemon.path = /opt/tests/$${PACKAGENAME}
 daemon.commands = \
     sed -e \"s,@BINDIR@,$$BINDIR,g\" \
-        -e \"s,@PLUGINDIR@,$$LIBDIR/contactsd-1.0/plugins,g\" \
+        -e \"s,@PLUGINDIR@,$$LIBDIR/$${PACKAGENAME}-1.0/plugins,g\" \
     $< > $@ && chmod +x $@ || rm -f $@
 
 wrapper.target = ut_birthdayplugin-wrapper.sh
 wrapper.depends = $$PWD/ut_birthdayplugin-wrapper.sh.in
-wrapper.path = /opt/tests/contactsd/ut_birthdayplugin
+wrapper.path = /opt/tests/$${PACKAGENAME}/ut_birthdayplugin
 wrapper.commands = \
-    sed -e \"s,@SCRIPTDIR@,/opt/tests/contactsd,g\" \
-        -e \"s,@OUT_SCRIPTDIR@,/opt/tests/contactsd,g\" \
+    sed -e \"s,@SCRIPTDIR@,/opt/tests/$${PACKAGENAME},g\" \
+        -e \"s,@OUT_SCRIPTDIR@,/opt/tests/$${PACKAGENAME},g\" \
         -e \"s,@BINDIR@,$$BINDIR,g\" \
         -e \"s,@WITH_DAEMON@,$$daemon.target,g\" \
     $< > $@ && chmod +x $@ || rm -f $@
 
 install_extrascripts.files = $$wrapper.target $$daemon.target
-install_extrascripts.path = /opt/tests/contactsd/ut_birthdayplugin
+install_extrascripts.path = /opt/tests/$${PACKAGENAME}/ut_birthdayplugin
 install_extrascripts.depends = daemon wrapper
 install_extrascripts.CONFIG = no_check_exist
 
diff --git a/tests/ut_birthdayplugin/ut_birthdayplugin.pro b/tests/ut_birthdayplugin/ut_birthdayplugin.pro
index d2bcaa5..e1d1e13 100644
--- a/tests/ut_birthdayplugin/ut_birthdayplugin.pro
+++ b/tests/ut_birthdayplugin/ut_birthdayplugin.pro
@@ -20,26 +20,37 @@
 # Alternatively, this file may be used in accordance with the terms and
 # conditions contained in a signed written agreement between you and Nokia.
 
+include(../common/test-common.pri)
+
 TARGET = ut_birthdayplugin
-target.path = /opt/tests/contactsd
+target.path = /opt/tests/$${PACKAGENAME}
 
 include(check.pri)
 include(tests.pri)
-include(../common/test-common.pri)
 
 # Hack: mkcal adds /usr/include/meegotouch to include path, and alphabetic CONFIG
 # always puts that before mlocale, resulting in link errors. Force mlocale to be
 # first.
-INCLUDEPATH += /usr/include/mlocale
+equals(QT_MAJOR_VERSION, 4): INCLUDEPATH += /usr/include/mlocale
+equals(QT_MAJOR_VERSION, 5): INCLUDEPATH += /usr/include/mlocale5
 
-CONFIG += test mobility mlocale mkcal link_pkgconfig
-PKGCONFIG += mlite
+CONFIG += test link_pkgconfig
 
 QT -= gui
 QT += testlib
-MOBILITY = contacts
 DEFINES += ENABLE_DEBUG
 
+equals(QT_MAJOR_VERSION, 4) {
+    CONFIG += mobility mlocale mkcal
+    MOBILITY = contacts
+    PKGCONFIG += mlite
+}
+equals(QT_MAJOR_VERSION, 5) {
+    PKGCONFIG += Qt5Contacts
+    PKGCONFIG += mlite5 mlocale5 libmkcal-qt5 libkcalcoren-qt5
+    DEFINES *= USING_QTPIM
+}
+
 CONFIG(coverage):{
 QMAKE_CXXFLAGS +=  -ftest-coverage -fprofile-arcs
 LIBS += -lgcov
diff --git a/tests/ut_contactsd/ut_contactsd.pro b/tests/ut_contactsd/ut_contactsd.pro
index ebc23ed..261e1ea 100644
--- a/tests/ut_contactsd/ut_contactsd.pro
+++ b/tests/ut_contactsd/ut_contactsd.pro
@@ -52,7 +52,7 @@ SOURCES += test-contactsd.cpp \
     $$TOP_SOURCEDIR/src/debug.cpp \
     $$TOP_SOURCEDIR/src/base-plugin.cpp
 
-DEFINES += CONTACTSD_PLUGINS_DIR=\\\"$$LIBDIR/contactsd-1.0/plugins\\\"
+DEFINES += CONTACTSD_PLUGINS_DIR=\\\"$$LIBDIR/$${PACKAGENAME}-1.0/plugins\\\"
 
 #gcov stuff
 CONFIG(coverage):{
diff --git a/tests/ut_telepathyplugin/test-expectation.cpp b/tests/ut_telepathyplugin/test-expectation.cpp
index 73fb634..d324b82 100644
--- a/tests/ut_telepathyplugin/test-expectation.cpp
+++ b/tests/ut_telepathyplugin/test-expectation.cpp
@@ -38,9 +38,14 @@
 #include "test-expectation.h"
 #include "debug.h"
 
+#ifdef USING_QTPIM
+QContactId apiId(const QContact &contact) { return contact.id(); }
+#else
+QContactLocalId apiId(const QContact &contact) { return contact.localId(); }
+#endif
 // --- TestExpectation ---
 
-void TestExpectation::verify(Event event, const QList<QContactLocalId> &contactIds)
+void TestExpectation::verify(Event event, const QList<ContactIdType> &contactIds)
 {
      new TestFetchContacts(contactIds, event, this);
 }
@@ -53,7 +58,7 @@ void TestExpectation::verify(Event event, const QList<QContact> &contacts)
     emitFinished();
 }
 
-void TestExpectation::verify(Event event, const QList<QContactLocalId> &contactIds, QContactManager::Error error)
+void TestExpectation::verify(Event event, const QList<ContactIdType> &contactIds, QContactManager::Error error)
 {
     Q_UNUSED(event);
     Q_UNUSED(contactIds);
@@ -70,7 +75,7 @@ void TestExpectation::emitFinished()
 
 // --- TestFetchContacts ---
 
-TestFetchContacts::TestFetchContacts(const QList<QContactLocalId> &contactIds,
+TestFetchContacts::TestFetchContacts(const QList<ContactIdType> &contactIds,
         Event event, TestExpectation *exp) : QObject(exp),
         mContactIds(contactIds), mEvent(event), mExp(exp)
 {
@@ -79,7 +84,11 @@ TestFetchContacts::TestFetchContacts(const QList<QContactLocalId> &contactIds,
             SIGNAL(resultsAvailable()),
             SLOT(onContactsFetched()));
     request->setManager(mExp->contactManager());
+#ifdef USING_QTPIM
+    request->setIds(contactIds);
+#else
     request->setLocalIds(contactIds);
+#endif
     QVERIFY(request->start());
 }
 
@@ -120,7 +129,7 @@ void TestExpectationInit::verify(Event event, const QList<QContact> &contacts)
 {
     QCOMPARE(event, EventChanged);
     QCOMPARE(contacts.count(), 1);
-    QCOMPARE(contacts[0].localId(), contactManager()->selfContactId());
+    QCOMPARE(apiId(contacts[0]), contactManager()->selfContactId());
     emitFinished();
 }
 
@@ -136,7 +145,7 @@ void TestExpectationCleanup::verify(Event event, const QList<QContact> &contacts
     QCOMPARE(event, EventChanged);
 
     Q_FOREACH (const QContact &contact, contacts) {
-        if (contact.localId() == contactManager()->selfContactId()) {
+        if (apiId(contact) == contactManager()->selfContactId()) {
             QVERIFY(!mSelfChanged);
             mSelfChanged = true;
             mNContacts--;
@@ -151,7 +160,7 @@ void TestExpectationCleanup::verify(Event event, const QList<QContact> &contacts
     maybeEmitFinished();
 }
 
-void TestExpectationCleanup::verify(Event event, const QList<QContactLocalId> &contactIds, QContactManager::Error error)
+void TestExpectationCleanup::verify(Event event, const QList<ContactIdType> &contactIds, QContactManager::Error error)
 {
     QCOMPARE(event, EventRemoved);
     QCOMPARE(error, QContactManager::DoesNotExistError);
@@ -185,7 +194,7 @@ void TestExpectationContact::verify(Event event, const QList<QContact> &contacts
     emitFinished();
 }
 
-void TestExpectationContact::verify(Event event, const QList<QContactLocalId> &contactIds, QContactManager::Error error)
+void TestExpectationContact::verify(Event event, const QList<ContactIdType> &contactIds, QContactManager::Error error)
 {
     QCOMPARE(event, EventRemoved);
     QCOMPARE(contactIds.count(), 1);
@@ -193,17 +202,25 @@ void TestExpectationContact::verify(Event event, const QList<QContactLocalId> &c
     emitFinished();
 }
 
-void TestExpectationContact::verify(QContact contact)
+void TestExpectationContact::verify(const QContact &contact)
 {
     if (!mAccountUri.isEmpty()) {
+#ifdef USING_QTPIM
+        // TODO
+#else
         const QString uri = QString("telepathy:%1!%2").arg(ACCOUNT_PATH).arg(mAccountUri);
         QList<QContactOnlineAccount> details = contact.details<QContactOnlineAccount>("DetailUri", uri);
         QCOMPARE(details.count(), 1);
         QCOMPARE(details[0].value("AccountPath"), QString(ACCOUNT_PATH));
+#endif
     }
 
     if (mFlags & VerifyAlias) {
+#ifdef USING_QTPIM
+        QString label = contact.detail<QContactDisplayLabel>().label();
+#else
         QString label = contact.displayLabel();
+#endif
         QCOMPARE(label, mAlias);
     }
 
@@ -213,10 +230,14 @@ void TestExpectationContact::verify(QContact contact)
             QContactGlobalPresence presenceDetail = contact.detail<QContactGlobalPresence>();
             presence = presenceDetail.presenceState();
         } else {
+#ifdef USING_QTPIM
+        // TODO
+#else
             const QString uri = QString("presence:%1!%2").arg(ACCOUNT_PATH).arg(mAccountUri);
             QList<QContactPresence> details = contact.details<QContactPresence>("DetailUri", uri);
             QCOMPARE(details.count(), 1);
             presence = details[0].presenceState();
+#endif
         }
 
         switch (mPresence) {
@@ -253,17 +274,24 @@ void TestExpectationContact::verify(QContact contact)
     }
 
     if (mFlags & VerifyAuthorization) {
+#ifdef USING_QTPIM
+        // TODO
+#else
         const QString uri = QString("presence:%1!%2").arg(ACCOUNT_PATH).arg(mAccountUri);
         QList<QContactPresence> details = contact.details<QContactPresence>("DetailUri", uri);
         QCOMPARE(details.count(), 1);
         QCOMPARE(details[0].value("AuthStatusFrom"), mSubscriptionState);
         QCOMPARE(details[0].value("AuthStatusTo"), mPublishState);
+#endif
     }
 
     if (mFlags & VerifyInfo) {
         uint nMatchedField = 0;
 
         Q_FOREACH (const QContactDetail &detail, contact.details()) {
+#ifdef USING_QTPIM
+        // TODO
+#else
             QStringList params;
             if (detail.contexts().contains("Work")) {
                 params << QLatin1String("type=work");
@@ -303,6 +331,7 @@ void TestExpectationContact::verify(QContact contact)
                 verifyContactInfo("email", QStringList() << emailAddress.emailAddress(), params);
                 nMatchedField++;
             }
+#endif
         }
 
         if (mContactInfo != NULL) {
@@ -310,8 +339,8 @@ void TestExpectationContact::verify(QContact contact)
         }
     }
 
-    if (mFlags & VerifyLocalId) {
-        QCOMPARE(contact.localId(), mLocalId);
+    if (mFlags & VerifyContactId) {
+        QCOMPARE(apiId(contact), mContactId);
     }
 
     if (mFlags & VerifyGenerator) {
@@ -400,7 +429,7 @@ TestExpectationDisconnect::TestExpectationDisconnect(int nContacts) :
 void TestExpectationDisconnect::verify(Event event, const QList<QContact> &contacts)
 {
     Q_FOREACH (const QContact contact, contacts) {
-        if (contact.localId() == contactManager()->selfContactId()) {
+        if (apiId(contact) == contactManager()->selfContactId()) {
             QCOMPARE(event, EventChanged);
             verifyPresence(TP_TESTS_CONTACTS_CONNECTION_STATUS_OFFLINE);
             mSelfChanged = true;
@@ -428,8 +457,8 @@ void TestExpectationDisconnect::verify(Event event, const QList<QContact> &conta
 
 // --- TestExpectationMerge ---
 
-TestExpectationMerge::TestExpectationMerge(const QContactLocalId masterId,
-        const QList<QContactLocalId> mergeIds, const QList<TestExpectationContactPtr> expectations)
+TestExpectationMerge::TestExpectationMerge(const ContactIdType &masterId,
+        const QList<ContactIdType> &mergeIds, const QList<TestExpectationContactPtr> expectations)
         : mMasterId(masterId), mMergeIds(mergeIds), mGotMergedContact(false),
         mContactExpectations(expectations)
 {
@@ -439,7 +468,7 @@ void TestExpectationMerge::verify(Event event, const QList<QContact> &contacts)
 {
     QCOMPARE(event, EventChanged);
     QCOMPARE(contacts.count(), 1);
-    QCOMPARE(contacts[0].localId(), mMasterId);
+    QCOMPARE(apiId(contacts[0]), mMasterId);
     mGotMergedContact = true;
 
     Q_FOREACH (TestExpectationContactPtr exp, mContactExpectations) {
@@ -450,15 +479,15 @@ void TestExpectationMerge::verify(Event event, const QList<QContact> &contacts)
 }
 
 
-void TestExpectationMerge::verify(Event event, const QList<QContactLocalId> &contactIds,
+void TestExpectationMerge::verify(Event event, const QList<ContactIdType> &contactIds,
         QContactManager::Error error)
 {
     QCOMPARE(event, EventRemoved);
     QCOMPARE(error, QContactManager::DoesNotExistError);
 
-    Q_FOREACH (QContactLocalId localId, contactIds) {
-        QVERIFY(mMergeIds.contains(localId));
-        mMergeIds.removeOne(localId);
+    Q_FOREACH (const ContactIdType &id, contactIds) {
+        QVERIFY(mMergeIds.contains(id));
+        mMergeIds.removeOne(id);
     }
 
     maybeEmitFinished();
@@ -492,7 +521,7 @@ void TestExpectationMass::verify(Event event, const QList<QContact> &contacts)
     maybeEmitFinished();
 }
 
-void TestExpectationMass::verify(Event event, const QList<QContactLocalId> &contactIds,
+void TestExpectationMass::verify(Event event, const QList<ContactIdType> &contactIds,
         QContactManager::Error error)
 {
     QCOMPARE(event, EventRemoved);
diff --git a/tests/ut_telepathyplugin/test-expectation.h b/tests/ut_telepathyplugin/test-expectation.h
index ee36dba..d5c33ec 100644
--- a/tests/ut_telepathyplugin/test-expectation.h
+++ b/tests/ut_telepathyplugin/test-expectation.h
@@ -37,7 +37,13 @@
 
 #define ACCOUNT_PATH TP_ACCOUNT_OBJECT_PATH_BASE "fakecm/fakeproto/fakeaccount"
 
+#ifdef USING_QTPIM
+QTCONTACTS_USE_NAMESPACE
+typedef QContactId ContactIdType;
+#else
 QTM_USE_NAMESPACE
+typedef QContactLocalId ContactIdType;
+#endif
 
 typedef enum {
     EventAdded,
@@ -53,7 +59,7 @@ class TestExpectation : public QObject, public Tp::RefCounted
     Q_OBJECT
 
 public:
-    void verify(Event event, const QList<QContactLocalId> &contactIds);
+    void verify(Event event, const QList<ContactIdType> &contactIds);
 
     void setContactManager(QContactManager *contactManager) { mContactManager = contactManager; };
     QContactManager *contactManager() { return mContactManager; };
@@ -63,7 +69,7 @@ Q_SIGNALS:
 
 protected:
     virtual void verify(Event event, const QList<QContact> &contacts);
-    virtual void verify(Event event, const QList<QContactLocalId> &contactIds, QContactManager::Error error);
+    virtual void verify(Event event, const QList<ContactIdType> &contactIds, QContactManager::Error error);
     void emitFinished();
 
 private:
@@ -80,13 +86,13 @@ class TestFetchContacts : public QObject
     Q_OBJECT
 
 public:
-    TestFetchContacts(const QList<QContactLocalId> &contactIds, Event event, TestExpectation *exp);
+    TestFetchContacts(const QList<ContactIdType> &contactIds, Event event, TestExpectation *exp);
 
 private Q_SLOTS:
     void onContactsFetched();
 
 private:
-    QList<QContactLocalId> mContactIds;
+    QList<ContactIdType> mContactIds;
     Event mEvent;
     TestExpectation *mExp;
 };
@@ -113,7 +119,7 @@ public:
 
 protected:
     void verify(Event event, const QList<QContact> &contacts);
-    void verify(Event event, const QList<QContactLocalId> &contactIds, QContactManager::Error error);
+    void verify(Event event, const QList<ContactIdType> &contactIds, QContactManager::Error error);
 
 private:
     void maybeEmitFinished();
@@ -134,22 +140,29 @@ public:
     TestExpectationContact(Event event, QString accountUri = QString());
 
     QContact contact() { return mContact; };
-    void setEvent(Event event) { mEvent = event; };
+    void setEvent(const Event &event) { mEvent = event; };
     void resetVerifyFlags() { mFlags = 0; };
 
-    void verifyAlias(QString alias) { mAlias = alias; mFlags |= VerifyAlias; };
+    void verifyAlias(const QString &alias) { mAlias = alias; mFlags |= VerifyAlias; };
     void verifyPresence(TpTestsContactsConnectionPresenceStatusIndex presence) { mPresence = presence; mFlags |= VerifyPresence; };
-    void verifyAvatar(QByteArray avatarData) { mAvatarData = avatarData; mFlags |= VerifyAvatar; };
-    void verifyAuthorization(QString subscriptionState, QString publishState) { mSubscriptionState = subscriptionState; mPublishState = publishState; mFlags |= VerifyAuthorization; };
+    void verifyAvatar(const QByteArray &avatarData) { mAvatarData = avatarData; mFlags |= VerifyAvatar; };
+    void verifyAuthorization(const QString &subscriptionState, const QString &publishState) { mSubscriptionState = subscriptionState; mPublishState = publishState; mFlags |= VerifyAuthorization; };
     void verifyInfo(GPtrArray *contactInfo) { mContactInfo = contactInfo; mFlags |= VerifyInfo; };
-    void verifyLocalId(QContactLocalId localId) { mLocalId = localId; mFlags |= VerifyLocalId; };
-    void verifyGenerator(QString generator) { mGenerator = generator; mFlags |= VerifyGenerator; };
+    void verifyContactId(const QContact &contact) {
+#ifdef USING_QTPIM
+        mContactId = contact.id();
+#else
+        mContactId = contact.localId();
+#endif
+        mFlags |= VerifyContactId;
+    };
+    void verifyGenerator(const QString &generator) { mGenerator = generator; mFlags |= VerifyGenerator; };
 
-    void verify(QContact contact);
+    void verify(const QContact &contact);
 
 protected:
     void verify(Event event, const QList<QContact> &contacts);
-    void verify(Event event, const QList<QContactLocalId> &contactIds, QContactManager::Error error);
+    void verify(Event event, const QList<ContactIdType> &contactIds, QContactManager::Error error);
 
 private:
     enum VerifyFlags {
@@ -159,7 +172,7 @@ private:
         VerifyAvatar         = (1 << 2),
         VerifyAuthorization  = (1 << 3),
         VerifyInfo           = (1 << 4),
-        VerifyLocalId        = (1 << 5),
+        VerifyContactId      = (1 << 5),
         VerifyGenerator      = (1 << 6),
         VerifyAll            = (1 << 7) - 1
     };
@@ -176,7 +189,7 @@ private:
     QString mSubscriptionState;
     QString mPublishState;
     GPtrArray *mContactInfo;
-    QContactLocalId mLocalId;
+    ContactIdType mContactId;
     QString mGenerator;
 
     QContact mContact;
@@ -208,18 +221,18 @@ class TestExpectationMerge : public TestExpectation
     Q_OBJECT
 
 public:
-    TestExpectationMerge(const QContactLocalId masterId, const QList<QContactLocalId> mergeIds,
+    TestExpectationMerge(const ContactIdType &masterId, const QList<ContactIdType> &mergeIds,
             const QList<TestExpectationContactPtr> expectations = QList<TestExpectationContactPtr>());
 
 protected:
     void verify(Event event, const QList<QContact> &contacts);
-    void verify(Event event, const QList<QContactLocalId> &contactIds, QContactManager::Error error);
+    void verify(Event event, const QList<ContactIdType> &contactIds, QContactManager::Error error);
 
 private:
     void maybeEmitFinished();
 
-    QContactLocalId mMasterId;
-    QList<QContactLocalId> mMergeIds;
+    ContactIdType mMasterId;
+    QList<ContactIdType> mMergeIds;
     bool mGotMergedContact;
     QList<TestExpectationContactPtr> mContactExpectations;
 };
@@ -236,7 +249,7 @@ public:
 
 protected:
     void verify(Event event, const QList<QContact> &contacts);
-    void verify(Event event, const QList<QContactLocalId> &contactIds, QContactManager::Error error);
+    void verify(Event event, const QList<ContactIdType> &contactIds, QContactManager::Error error);
 
 private:
     void maybeEmitFinished();
diff --git a/tests/ut_telepathyplugin/test-telepathy-plugin.cpp b/tests/ut_telepathyplugin/test-telepathy-plugin.cpp
index e99ba52..29477d6 100644
--- a/tests/ut_telepathyplugin/test-telepathy-plugin.cpp
+++ b/tests/ut_telepathyplugin/test-telepathy-plugin.cpp
@@ -23,13 +23,18 @@
 
 #include <QContact>
 #include <QContactFetchByIdRequest>
-#include <QContactLocalIdFetchRequest>
 #include <QContactFetchRequest>
 #include <QContactRemoveRequest>
 #include <QContactSaveRequest>
 #include <QContactSyncTarget>
-#include <QContactLocalIdFilter>
 #include <QContactOnlineAccount>
+#ifdef USING_QTPIM
+#include <QContactIdFilter>
+#include <QContactIdFetchRequest>
+#else
+#include <QContactLocalIdFilter>
+#include <QContactLocalIdFetchRequest>
+#endif
 
 #include <TelepathyQt/Debug>
 
@@ -66,6 +71,17 @@ void TestTelepathyPlugin::initTestCase()
 
     /* Create a QContactManager and track added/changed contacts */
     mContactManager = new QContactManager;
+#ifdef USING_QTPIM
+    connect(mContactManager,
+            SIGNAL(contactsAdded(const QList<QContactId>&)),
+            SLOT(contactsAdded(const QList<QContactId>&)));
+    connect(mContactManager,
+            SIGNAL(contactsChanged(const QList<QContactId>&)),
+            SLOT(contactsChanged(const QList<QContactId>&)));
+    connect(mContactManager,
+            SIGNAL(contactsRemoved(const QList<QContactId>&)),
+            SLOT(contactsRemoved(const QList<QContactId>&)));
+#else
     connect(mContactManager,
             SIGNAL(contactsAdded(const QList<QContactLocalId>&)),
             SLOT(contactsAdded(const QList<QContactLocalId>&)));
@@ -75,7 +91,8 @@ void TestTelepathyPlugin::initTestCase()
     connect(mContactManager,
             SIGNAL(contactsRemoved(const QList<QContactLocalId>&)),
             SLOT(contactsRemoved(const QList<QContactLocalId>&)));
-    mLocalContactIds += mContactManager->selfContactId();
+#endif
+    mContactIds += mContactManager->selfContactId();
 
     /* Create a fake AccountManager */
     TpDBusDaemon *dbus = tp_dbus_daemon_dup(NULL);
@@ -144,10 +161,10 @@ void TestTelepathyPlugin::cleanup()
     tp_tests_simple_account_removed(mAccount);
 
     /* Wait for all contacts to disappear, and local contacts to get updated */
-    runExpectation(TestExpectationCleanupPtr(new TestExpectationCleanup(mLocalContactIds.count() - mNOnlyLocalContacts)));
+    runExpectation(TestExpectationCleanupPtr(new TestExpectationCleanup(mContactIds.count() - mNOnlyLocalContacts)));
 
     /* Remove remaining local contacts */
-    QList<QContactLocalId> contactsToRemove = mLocalContactIds;
+    QList<ContactIdType> contactsToRemove = mContactIds;
     contactsToRemove.removeOne(mContactManager->selfContactId());
     if (!contactsToRemove.isEmpty()) {
         QContactRemoveRequest *request = new QContactRemoveRequest();
@@ -157,7 +174,7 @@ void TestTelepathyPlugin::cleanup()
         runExpectation(TestExpectationMassPtr(new TestExpectationMass(0, 0, contactsToRemove.count())));
     }
 
-    QVERIFY(mLocalContactIds.count() == 1);
+    QVERIFY(mContactIds.count() == 1);
 
     g_object_unref(mConnService);
     g_object_unref(mConnection);
@@ -405,7 +422,7 @@ void TestTelepathyPlugin::testRemoveBuddyDBusAPI()
 
     // Set account offline to test offline removal
     tp_cli_connection_call_disconnect(mConnection, -1, NULL, NULL, NULL, NULL);
-    TestExpectationDisconnectPtr exp3(new TestExpectationDisconnect(mLocalContactIds.count()));
+    TestExpectationDisconnectPtr exp3(new TestExpectationDisconnect(mContactIds.count()));
     runExpectation(exp3);
 
     // Remove buddy2 when account is offline
@@ -444,7 +461,7 @@ void TestTelepathyPlugin::testSetOffline()
 
     tp_cli_connection_call_disconnect(mConnection, -1, NULL, NULL, NULL, NULL);
 
-    runExpectation(TestExpectationDisconnectPtr(new TestExpectationDisconnect(mLocalContactIds.count())));
+    runExpectation(TestExpectationDisconnectPtr(new TestExpectationDisconnect(mContactIds.count())));
 }
 
 void TestTelepathyPlugin::testAvatar()
@@ -592,7 +609,11 @@ void TestTelepathyPlugin::testBug253679()
     QContact contact;
     QContactOnlineAccount onlineAccount;
     onlineAccount.setAccountUri(id);
+#ifdef USING_QTPIM
+    // TODO
+#else
     onlineAccount.setValue(QLatin1String("AccountPath"), QLatin1String(ACCOUNT_PATH));
+#endif
     contact.saveDetail(&onlineAccount);
 
     QContactSaveRequest *request = new QContactSaveRequest();
@@ -640,9 +661,9 @@ void TestTelepathyPlugin::testMergedContact()
 #if 0
     const QList<QContactLocalId> mergeIds = QList<QContactLocalId>() << contact2.localId();
     mergeContacts(contact1, mergeIds);
-    exp1->verifyLocalId(contact1.localId());
+    exp1->verifyContactId(contact1);
     exp1->verifyGenerator("telepathy");
-    exp2->verifyLocalId(contact1.localId());
+    exp2->verifyContactId(contact1);
     exp2->verifyGenerator("telepathy");
     const QList<TestExpectationContactPtr> expectations = QList<TestExpectationContactPtr>() << exp1 << exp2;
     runExpectation(TestExpectationMergePtr(new TestExpectationMerge(contact1.localId(), mergeIds, expectations)));
@@ -656,7 +677,7 @@ void TestTelepathyPlugin::testMergedContact()
         TP_TESTS_CONTACTS_CONNECTION (mConnService),
         1, &handle1, &presence, &message);
     TestExpectationContactPtr exp4(new TestExpectationContact(EventChanged));
-    exp4->verifyLocalId(contact1.localId());
+    exp4->verifyContactId(contact1);
     exp4->verifyPresence(presence);
     runExpectation(exp4);
 
@@ -742,7 +763,7 @@ void TestTelepathyPlugin::testBenchmark()
     /* Set account offline */
     tp_cli_connection_call_disconnect(mConnection, -1, NULL, NULL, NULL, NULL);
 
-    runExpectation(TestExpectationDisconnectPtr(new TestExpectationDisconnect(mLocalContactIds.count())));
+    runExpectation(TestExpectationDisconnectPtr(new TestExpectationDisconnect(mContactIds.count())));
 }
 
 TpHandle TestTelepathyPlugin::ensureHandle(const gchar *id)
@@ -795,37 +816,36 @@ void TestTelepathyPlugin::runExpectation(TestExpectationPtr exp)
     mExpectation = TestExpectationPtr();
 }
 
-void TestTelepathyPlugin::contactsAdded(const QList<QContactLocalId>& contactIds)
+void TestTelepathyPlugin::contactsAdded(const QList<ContactIdType>& contactIds)
 {
     debug() << "Got contactsAdded";
-    Q_FOREACH (const QContactLocalId &id, contactIds) {
-        QVERIFY(!mLocalContactIds.contains(id));
-        mLocalContactIds << id;
+    Q_FOREACH (const ContactIdType &id, contactIds) {
+        QVERIFY(!mContactIds.contains(id));
+        mContactIds << id;
     }
     verify(EventAdded, contactIds);
 }
 
-void TestTelepathyPlugin::contactsChanged(const QList<QContactLocalId>& contactIds)
+void TestTelepathyPlugin::contactsChanged(const QList<ContactIdType>& contactIds)
 {
     debug() << "Got contactsChanged";
-    Q_FOREACH (const QContactLocalId &id, contactIds) {
-        QVERIFY(mLocalContactIds.contains(id));
+    Q_FOREACH (const ContactIdType &id, contactIds) {
+        QVERIFY(mContactIds.contains(id));
     }
     verify(EventChanged, contactIds);
 }
 
-void TestTelepathyPlugin::contactsRemoved(const QList<QContactLocalId>& contactIds)
+void TestTelepathyPlugin::contactsRemoved(const QList<ContactIdType>& contactIds)
 {
     debug() << "Got contactsRemoved";
-    Q_FOREACH (const QContactLocalId &id, contactIds) {
-        QVERIFY(mLocalContactIds.contains(id));
-        mLocalContactIds.removeOne(id);
+    Q_FOREACH (const ContactIdType &id, contactIds) {
+        QVERIFY(mContactIds.contains(id));
+        mContactIds.removeOne(id);
     }
     verify(EventRemoved, contactIds);
 }
 
-void TestTelepathyPlugin::verify(Event event,
-    const QList<QContactLocalId> &contactIds)
+void TestTelepathyPlugin::verify(Event event, const QList<ContactIdType> &contactIds)
 {
     QVERIFY(mExpectation != 0);
     mExpectation->verify(event, contactIds);
diff --git a/tests/ut_telepathyplugin/test-telepathy-plugin.h b/tests/ut_telepathyplugin/test-telepathy-plugin.h
index 2287133..d50473a 100644
--- a/tests/ut_telepathyplugin/test-telepathy-plugin.h
+++ b/tests/ut_telepathyplugin/test-telepathy-plugin.h
@@ -42,7 +42,11 @@
 #include "test.h"
 #include "test-expectation.h"
 
+#ifdef USING_QTPIM
+QTCONTACTS_USE_NAMESPACE
+#else
 QTM_USE_NAMESPACE
+#endif
 
 /**
  * Telepathy plugin's unit test
@@ -50,15 +54,29 @@ QTM_USE_NAMESPACE
 class TestTelepathyPlugin : public Test
 {
     Q_OBJECT
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+    Q_PLUGIN_METADATA(IID "org.nemomobile.contactsd.test-telepathy")
+#endif
 
 public:
+#ifdef USING_QTPIM
+    typedef QContactId ContactIdType;
+#else
+    typedef QContactLocalId ContactIdType;
+#endif
 
     TestTelepathyPlugin(QObject *parent = 0);
 
 protected Q_SLOTS:
+#ifdef USING_QTPIM
+    void contactsAdded(const QList<QContactId>& contactIds);
+    void contactsChanged(const QList<QContactId>& contactIds);
+    void contactsRemoved(const QList<QContactId>& contactIds);
+#else
     void contactsAdded(const QList<QContactLocalId>& contactIds);
     void contactsChanged(const QList<QContactLocalId>& contactIds);
     void contactsRemoved(const QList<QContactLocalId>& contactIds);
+#endif
     void onContactsFetched();
     void onRequestFinished();
 
@@ -96,7 +114,7 @@ private:
     TestExpectationContactPtr createContact(const gchar *id, TpHandle &handle, bool please = false);
     TestExpectationContactPtr createContact(const gchar *id, bool please = false);
     GPtrArray *createContactInfoTel(const gchar *number);
-    void verify(Event event, const QList<QContactLocalId> &contactIds);
+    void verify(Event event, const QList<ContactIdType> &contactIds);
     void runExpectation(TestExpectationPtr expectation);
     void startRequest(QContactAbstractRequest *request);
 
@@ -109,7 +127,7 @@ private:
     TpConnection *mConnection;
     TestContactListManager *mListManager;
 
-    QList<QContactLocalId> mLocalContactIds;
+    QList<ContactIdType> mContactIds;
     int mNOnlyLocalContacts;
 
     TestExpectationPtr mExpectation;
diff --git a/tests/ut_telepathyplugin/tests.pri b/tests/ut_telepathyplugin/tests.pri
index 66690bf..0a519fb 100644
--- a/tests/ut_telepathyplugin/tests.pri
+++ b/tests/ut_telepathyplugin/tests.pri
@@ -22,23 +22,23 @@
 
 daemon.target = with-daemon.sh
 daemon.depends = $$PWD/with-daemon.sh.in
-daemon.path = /opt/tests/contactsd
+daemon.path = /opt/tests/$${PACKAGENAME}
 daemon.commands = \
     sed -e \"s,@BINDIR@,$$BINDIR,g\" \
-        -e \"s,@PLUGINDIR@,$$LIBDIR/contactsd-1.0/plugins,g\" \
+        -e \"s,@PLUGINDIR@,$$LIBDIR/$${PACKAGENAME}-1.0/plugins,g\" \
     $< > $@ && chmod +x $@ || rm -f $@
 
 wrapper.target = ut_telepathyplugin-wrapper.sh
 wrapper.depends = $$PWD/ut_telepathyplugin-wrapper.sh.in
-wrapper.path = /opt/tests/contactsd/ut_telepathyplugin
+wrapper.path = /opt/tests/$${PACKAGENAME}/ut_telepathyplugin
 wrapper.commands = \
-    sed -e \"s,@SCRIPTDIR@,/opt/tests/contactsd,g\" \
+    sed -e \"s,@SCRIPTDIR@,/opt/tests/$${PACKAGENAME},g\" \
         -e \"s,@BINDIR@,$$BINDIR,g\" \
         -e \"s,@WITH_DAEMON@,$$daemon.target,g\" \
     $< > $@ && chmod +x $@ || rm -f $@
 
 install_extrascripts.files = $$wrapper.target $$daemon.target
-install_extrascripts.path = /opt/tests/contactsd/ut_telepathyplugin
+install_extrascripts.path = /opt/tests/$${PACKAGENAME}/ut_telepathyplugin
 install_extrascripts.depends = daemon wrapper
 install_extrascripts.CONFIG = no_check_exist
 
diff --git a/tests/ut_telepathyplugin/ut_telepathyplugin.pro b/tests/ut_telepathyplugin/ut_telepathyplugin.pro
index d0d927f..6ebd597 100644
--- a/tests/ut_telepathyplugin/ut_telepathyplugin.pro
+++ b/tests/ut_telepathyplugin/ut_telepathyplugin.pro
@@ -20,26 +20,37 @@
 # Alternatively, this file may be used in accordance with the terms and
 # conditions contained in a signed written agreement between you and Nokia.
 
+include(../common/test-common.pri)
+
 PRE_TARGETDEPS += ../libtelepathy/libtelepathy.a
 
 TARGET = ut_telepathyplugin
-target.path = /opt/tests/contactsd
+target.path = /opt/tests/$${PACKAGENAME}
 
 include(check.pri)
 include(tests.pri)
-include(../common/test-common.pri)
 
 TEMPLATE = app
 
-CONFIG += test qt mobility
+CONFIG += test qt
 QT += testlib dbus
 QT -= gui
-MOBILITY += contacts
 CONFIG += link_pkgconfig
-PKGCONFIG += TelepathyQt4 telepathy-glib
+PKGCONFIG += telepathy-glib
 DEFINES += QT_NO_KEYWORDS
 DEFINES += ENABLE_DEBUG
 
+equals(QT_MAJOR_VERSION, 4) {
+    CONFIG += mobility
+    MOBILITY += contacts
+    PKGCONFIG += TelepathyQt4
+}
+equals(QT_MAJOR_VERSION, 5) {
+    PKGCONFIG += Qt5Contacts
+    PKGCONFIG += TelepathyQt5
+    DEFINES *= USING_QTPIM
+}
+
 system(cp $$PWD/../../plugins/telepathy/com.nokia.contacts.buddymanagement.xml .)
 system(qdbusxml2cpp -c BuddyManagementInterface -p buddymanagementinterface.h:buddymanagementinterface.cpp com.nokia.contacts.buddymanagement.xml)
 
